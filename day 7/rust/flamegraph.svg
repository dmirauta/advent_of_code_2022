<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="598" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="581.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="581.00"> </text><svg id="frames" x="10" width="1180" total_samples="228"><g><title>perf_event_comm (1 samples, 0.44%)</title><rect x="0.0000%" y="405" width="0.4386%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="415.50"></text></g><g><title>perf_iterate_sb (1 samples, 0.44%)</title><rect x="0.0000%" y="389" width="0.4386%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="399.50"></text></g><g><title>ctx_resched (2 samples, 0.88%)</title><rect x="0.8772%" y="389" width="0.8772%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="2"/><text x="1.1272%" y="399.50"></text></g><g><title>ctx_sched_in (2 samples, 0.88%)</title><rect x="0.8772%" y="373" width="0.8772%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="2"/><text x="1.1272%" y="383.50"></text></g><g><title>visit_groups_merge.constprop.0.isra.0 (2 samples, 0.88%)</title><rect x="0.8772%" y="357" width="0.8772%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="2"/><text x="1.1272%" y="367.50"></text></g><g><title>merge_sched_in (2 samples, 0.88%)</title><rect x="0.8772%" y="341" width="0.8772%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="2"/><text x="1.1272%" y="351.50"></text></g><g><title>perf_event_exec (4 samples, 1.75%)</title><rect x="0.4386%" y="405" width="1.7544%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="4"/><text x="0.6886%" y="415.50"></text></g><g><title>perf_iterate_ctx (1 samples, 0.44%)</title><rect x="1.7544%" y="389" width="0.4386%" height="15" fill="rgb(228,23,34)" fg:x="4" fg:w="1"/><text x="2.0044%" y="399.50"></text></g><g><title>perf_event_addr_filters_exec (1 samples, 0.44%)</title><rect x="1.7544%" y="373" width="0.4386%" height="15" fill="rgb(218,30,26)" fg:x="4" fg:w="1"/><text x="2.0044%" y="383.50"></text></g><g><title>perf-exec (6 samples, 2.63%)</title><rect x="0.0000%" y="533" width="2.6316%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="6"/><text x="0.2500%" y="543.50">pe..</text></g><g><title>entry_SYSCALL_64 (6 samples, 2.63%)</title><rect x="0.0000%" y="517" width="2.6316%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="6"/><text x="0.2500%" y="527.50">en..</text></g><g><title>do_syscall_64 (6 samples, 2.63%)</title><rect x="0.0000%" y="501" width="2.6316%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="6"/><text x="0.2500%" y="511.50">do..</text></g><g><title>__x64_sys_execve (6 samples, 2.63%)</title><rect x="0.0000%" y="485" width="2.6316%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="6"/><text x="0.2500%" y="495.50">__..</text></g><g><title>do_execveat_common.isra.0 (6 samples, 2.63%)</title><rect x="0.0000%" y="469" width="2.6316%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="6"/><text x="0.2500%" y="479.50">do..</text></g><g><title>bprm_execve (6 samples, 2.63%)</title><rect x="0.0000%" y="453" width="2.6316%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="6"/><text x="0.2500%" y="463.50">bp..</text></g><g><title>load_elf_binary (6 samples, 2.63%)</title><rect x="0.0000%" y="437" width="2.6316%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="6"/><text x="0.2500%" y="447.50">lo..</text></g><g><title>begin_new_exec (6 samples, 2.63%)</title><rect x="0.0000%" y="421" width="2.6316%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="6"/><text x="0.2500%" y="431.50">be..</text></g><g><title>strrchr (1 samples, 0.44%)</title><rect x="2.1930%" y="405" width="0.4386%" height="15" fill="rgb(210,31,41)" fg:x="5" fg:w="1"/><text x="2.4430%" y="415.50"></text></g><g><title>[libc.so.6] (2 samples, 0.88%)</title><rect x="4.3860%" y="501" width="0.8772%" height="15" fill="rgb(221,200,47)" fg:x="10" fg:w="2"/><text x="4.6360%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.44%)</title><rect x="5.2632%" y="501" width="0.4386%" height="15" fill="rgb(226,26,5)" fg:x="12" fg:w="1"/><text x="5.5132%" y="511.50"></text></g><g><title>core::cmp::max (1 samples, 0.44%)</title><rect x="5.2632%" y="485" width="0.4386%" height="15" fill="rgb(249,33,26)" fg:x="12" fg:w="1"/><text x="5.5132%" y="495.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.44%)</title><rect x="5.2632%" y="469" width="0.4386%" height="15" fill="rgb(235,183,28)" fg:x="12" fg:w="1"/><text x="5.5132%" y="479.50"></text></g><g><title>memchr::memmem::Searcher::find (1 samples, 0.44%)</title><rect x="5.7018%" y="501" width="0.4386%" height="15" fill="rgb(221,5,38)" fg:x="13" fg:w="1"/><text x="5.9518%" y="511.50"></text></g><g><title>realloc (1 samples, 0.44%)</title><rect x="6.1404%" y="501" width="0.4386%" height="15" fill="rgb(247,18,42)" fg:x="14" fg:w="1"/><text x="6.3904%" y="511.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::has_visited (1 samples, 0.44%)</title><rect x="7.0175%" y="485" width="0.4386%" height="15" fill="rgb(241,131,45)" fg:x="16" fg:w="1"/><text x="7.2675%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.44%)</title><rect x="7.0175%" y="469" width="0.4386%" height="15" fill="rgb(249,31,29)" fg:x="16" fg:w="1"/><text x="7.2675%" y="479.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.44%)</title><rect x="7.0175%" y="453" width="0.4386%" height="15" fill="rgb(225,111,53)" fg:x="16" fg:w="1"/><text x="7.2675%" y="463.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.44%)</title><rect x="7.0175%" y="437" width="0.4386%" height="15" fill="rgb(238,160,17)" fg:x="16" fg:w="1"/><text x="7.2675%" y="447.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::step (3 samples, 1.32%)</title><rect x="6.5789%" y="501" width="1.3158%" height="15" fill="rgb(214,148,48)" fg:x="15" fg:w="3"/><text x="6.8289%" y="511.50"></text></g><g><title>regex::prog::InstRanges::matches (1 samples, 0.44%)</title><rect x="7.4561%" y="485" width="0.4386%" height="15" fill="rgb(232,36,49)" fg:x="17" fg:w="1"/><text x="7.7061%" y="495.50"></text></g><g><title>core::cmp::PartialOrd::le (1 samples, 0.44%)</title><rect x="7.4561%" y="469" width="0.4386%" height="15" fill="rgb(209,103,24)" fg:x="17" fg:w="1"/><text x="7.7061%" y="479.50"></text></g><g><title>regex::exec::Exec::searcher_str (1 samples, 0.44%)</title><rect x="7.8947%" y="501" width="0.4386%" height="15" fill="rgb(229,88,8)" fg:x="18" fg:w="1"/><text x="8.1447%" y="511.50"></text></g><g><title>regex::exec::ExecNoSync::find_dfa_forward (3 samples, 1.32%)</title><rect x="8.3333%" y="501" width="1.3158%" height="15" fill="rgb(213,181,19)" fg:x="19" fg:w="3"/><text x="8.5833%" y="511.50"></text></g><g><title>regex::dfa::Fsm::forward (3 samples, 1.32%)</title><rect x="8.3333%" y="485" width="1.3158%" height="15" fill="rgb(254,191,54)" fg:x="19" fg:w="3"/><text x="8.5833%" y="495.50"></text></g><g><title>regex::dfa::Fsm::exec_at (2 samples, 0.88%)</title><rect x="8.7719%" y="469" width="0.8772%" height="15" fill="rgb(241,83,37)" fg:x="20" fg:w="2"/><text x="9.0219%" y="479.50"></text></g><g><title>[[heap]] (17 samples, 7.46%)</title><rect x="2.6316%" y="517" width="7.4561%" height="15" fill="rgb(233,36,39)" fg:x="6" fg:w="17"/><text x="2.8816%" y="527.50">[[heap]]</text></g><g><title>regex::re_trait::RegularExpression::locations (1 samples, 0.44%)</title><rect x="9.6491%" y="501" width="0.4386%" height="15" fill="rgb(226,3,54)" fg:x="22" fg:w="1"/><text x="9.8991%" y="511.50"></text></g><g><title>&lt;regex::exec::ExecNoSyncStr as regex::re_trait::RegularExpression&gt;::slots_len (1 samples, 0.44%)</title><rect x="9.6491%" y="485" width="0.4386%" height="15" fill="rgb(245,192,40)" fg:x="22" fg:w="1"/><text x="9.8991%" y="495.50"></text></g><g><title>&lt;regex::exec::ExecNoSync as regex::re_trait::RegularExpression&gt;::slots_len (1 samples, 0.44%)</title><rect x="9.6491%" y="469" width="0.4386%" height="15" fill="rgb(238,167,29)" fg:x="22" fg:w="1"/><text x="9.8991%" y="479.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.44%)</title><rect x="10.9649%" y="501" width="0.4386%" height="15" fill="rgb(232,182,51)" fg:x="25" fg:w="1"/><text x="11.2149%" y="511.50"></text></g><g><title>[libc.so.6] (3 samples, 1.32%)</title><rect x="11.4035%" y="501" width="1.3158%" height="15" fill="rgb(231,60,39)" fg:x="26" fg:w="3"/><text x="11.6535%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1 samples, 0.44%)</title><rect x="12.7193%" y="501" width="0.4386%" height="15" fill="rgb(208,69,12)" fg:x="29" fg:w="1"/><text x="12.9693%" y="511.50"></text></g><g><title>core::ptr::read (1 samples, 0.44%)</title><rect x="12.7193%" y="485" width="0.4386%" height="15" fill="rgb(235,93,37)" fg:x="29" fg:w="1"/><text x="12.9693%" y="495.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (1 samples, 0.44%)</title><rect x="12.7193%" y="469" width="0.4386%" height="15" fill="rgb(213,116,39)" fg:x="29" fg:w="1"/><text x="12.9693%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.44%)</title><rect x="13.1579%" y="501" width="0.4386%" height="15" fill="rgb(222,207,29)" fg:x="30" fg:w="1"/><text x="13.4079%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.44%)</title><rect x="13.1579%" y="485" width="0.4386%" height="15" fill="rgb(206,96,30)" fg:x="30" fg:w="1"/><text x="13.4079%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.44%)</title><rect x="13.1579%" y="469" width="0.4386%" height="15" fill="rgb(218,138,4)" fg:x="30" fg:w="1"/><text x="13.4079%" y="479.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.44%)</title><rect x="13.1579%" y="453" width="0.4386%" height="15" fill="rgb(250,191,14)" fg:x="30" fg:w="1"/><text x="13.4079%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.44%)</title><rect x="13.1579%" y="437" width="0.4386%" height="15" fill="rgb(239,60,40)" fg:x="30" fg:w="1"/><text x="13.4079%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.44%)</title><rect x="13.1579%" y="421" width="0.4386%" height="15" fill="rgb(206,27,48)" fg:x="30" fg:w="1"/><text x="13.4079%" y="431.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::has_visited (1 samples, 0.44%)</title><rect x="14.9123%" y="453" width="0.4386%" height="15" fill="rgb(225,35,8)" fg:x="34" fg:w="1"/><text x="15.1623%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.44%)</title><rect x="15.3509%" y="437" width="0.4386%" height="15" fill="rgb(250,213,24)" fg:x="35" fg:w="1"/><text x="15.6009%" y="447.50"></text></g><g><title>malloc (6 samples, 2.63%)</title><rect x="13.5965%" y="501" width="2.6316%" height="15" fill="rgb(247,123,22)" fg:x="31" fg:w="6"/><text x="13.8465%" y="511.50">ma..</text></g><g><title>[libc.so.6] (6 samples, 2.63%)</title><rect x="13.5965%" y="485" width="2.6316%" height="15" fill="rgb(231,138,38)" fg:x="31" fg:w="6"/><text x="13.8465%" y="495.50">[l..</text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::step (5 samples, 2.19%)</title><rect x="14.0351%" y="469" width="2.1930%" height="15" fill="rgb(231,145,46)" fg:x="32" fg:w="5"/><text x="14.2851%" y="479.50">r..</text></g><g><title>regex::prog::InstRanges::matches (2 samples, 0.88%)</title><rect x="15.3509%" y="453" width="0.8772%" height="15" fill="rgb(251,118,11)" fg:x="35" fg:w="2"/><text x="15.6009%" y="463.50"></text></g><g><title>core::cmp::PartialOrd::le (1 samples, 0.44%)</title><rect x="15.7895%" y="437" width="0.4386%" height="15" fill="rgb(217,147,25)" fg:x="36" fg:w="1"/><text x="16.0395%" y="447.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::exec_ (1 samples, 0.44%)</title><rect x="16.2281%" y="501" width="0.4386%" height="15" fill="rgb(247,81,37)" fg:x="37" fg:w="1"/><text x="16.4781%" y="511.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::clear (1 samples, 0.44%)</title><rect x="16.2281%" y="485" width="0.4386%" height="15" fill="rgb(209,12,38)" fg:x="37" fg:w="1"/><text x="16.4781%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.44%)</title><rect x="16.2281%" y="469" width="0.4386%" height="15" fill="rgb(227,1,9)" fg:x="37" fg:w="1"/><text x="16.4781%" y="479.50"></text></g><g><title>regex::dfa::Byte::is_ascii_word (1 samples, 0.44%)</title><rect x="16.6667%" y="501" width="0.4386%" height="15" fill="rgb(248,47,43)" fg:x="38" fg:w="1"/><text x="16.9167%" y="511.50"></text></g><g><title>[[stack]] (18 samples, 7.89%)</title><rect x="10.0877%" y="517" width="7.8947%" height="15" fill="rgb(221,10,30)" fg:x="23" fg:w="18"/><text x="10.3377%" y="527.50">[[stack]]</text></g><g><title>regex::exec::ExecNoSync::find_dfa_forward (2 samples, 0.88%)</title><rect x="17.1053%" y="501" width="0.8772%" height="15" fill="rgb(210,229,1)" fg:x="39" fg:w="2"/><text x="17.3553%" y="511.50"></text></g><g><title>regex::dfa::Fsm::forward (1 samples, 0.44%)</title><rect x="17.5439%" y="485" width="0.4386%" height="15" fill="rgb(222,148,37)" fg:x="40" fg:w="1"/><text x="17.7939%" y="495.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.44%)</title><rect x="20.1754%" y="389" width="0.4386%" height="15" fill="rgb(234,67,33)" fg:x="46" fg:w="1"/><text x="20.4254%" y="399.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.88%)</title><rect x="20.1754%" y="405" width="0.8772%" height="15" fill="rgb(247,98,35)" fg:x="46" fg:w="2"/><text x="20.4254%" y="415.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.44%)</title><rect x="20.6140%" y="389" width="0.4386%" height="15" fill="rgb(247,138,52)" fg:x="47" fg:w="1"/><text x="20.8640%" y="399.50"></text></g><g><title>do_syscall_64 (1 samples, 0.44%)</title><rect x="20.6140%" y="373" width="0.4386%" height="15" fill="rgb(213,79,30)" fg:x="47" fg:w="1"/><text x="20.8640%" y="383.50"></text></g><g><title>vm_mmap_pgoff (1 samples, 0.44%)</title><rect x="20.6140%" y="357" width="0.4386%" height="15" fill="rgb(246,177,23)" fg:x="47" fg:w="1"/><text x="20.8640%" y="367.50"></text></g><g><title>do_mmap (1 samples, 0.44%)</title><rect x="20.6140%" y="341" width="0.4386%" height="15" fill="rgb(230,62,27)" fg:x="47" fg:w="1"/><text x="20.8640%" y="351.50"></text></g><g><title>mmap_region (1 samples, 0.44%)</title><rect x="20.6140%" y="325" width="0.4386%" height="15" fill="rgb(216,154,8)" fg:x="47" fg:w="1"/><text x="20.8640%" y="335.50"></text></g><g><title>vm_area_alloc (1 samples, 0.44%)</title><rect x="20.6140%" y="309" width="0.4386%" height="15" fill="rgb(244,35,45)" fg:x="47" fg:w="1"/><text x="20.8640%" y="319.50"></text></g><g><title>kmem_cache_alloc (1 samples, 0.44%)</title><rect x="20.6140%" y="293" width="0.4386%" height="15" fill="rgb(251,115,12)" fg:x="47" fg:w="1"/><text x="20.8640%" y="303.50"></text></g><g><title>get_obj_cgroup_from_current (1 samples, 0.44%)</title><rect x="20.6140%" y="277" width="0.4386%" height="15" fill="rgb(240,54,50)" fg:x="47" fg:w="1"/><text x="20.8640%" y="287.50"></text></g><g><title>__get_obj_cgroup_from_memcg (1 samples, 0.44%)</title><rect x="20.6140%" y="261" width="0.4386%" height="15" fill="rgb(233,84,52)" fg:x="47" fg:w="1"/><text x="20.8640%" y="271.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.44%)</title><rect x="21.0526%" y="405" width="0.4386%" height="15" fill="rgb(207,117,47)" fg:x="48" fg:w="1"/><text x="21.3026%" y="415.50"></text></g><g><title>mprotect_fixup (1 samples, 0.44%)</title><rect x="21.4912%" y="341" width="0.4386%" height="15" fill="rgb(249,43,39)" fg:x="49" fg:w="1"/><text x="21.7412%" y="351.50"></text></g><g><title>perf_event_mmap (1 samples, 0.44%)</title><rect x="21.4912%" y="325" width="0.4386%" height="15" fill="rgb(209,38,44)" fg:x="49" fg:w="1"/><text x="21.7412%" y="335.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 3.07%)</title><rect x="19.2982%" y="421" width="3.0702%" height="15" fill="rgb(236,212,23)" fg:x="44" fg:w="7"/><text x="19.5482%" y="431.50">[ld..</text></g><g><title>entry_SYSCALL_64 (2 samples, 0.88%)</title><rect x="21.4912%" y="405" width="0.8772%" height="15" fill="rgb(242,79,21)" fg:x="49" fg:w="2"/><text x="21.7412%" y="415.50"></text></g><g><title>do_syscall_64 (2 samples, 0.88%)</title><rect x="21.4912%" y="389" width="0.8772%" height="15" fill="rgb(211,96,35)" fg:x="49" fg:w="2"/><text x="21.7412%" y="399.50"></text></g><g><title>__x64_sys_mprotect (2 samples, 0.88%)</title><rect x="21.4912%" y="373" width="0.8772%" height="15" fill="rgb(253,215,40)" fg:x="49" fg:w="2"/><text x="21.7412%" y="383.50"></text></g><g><title>do_mprotect_pkey (2 samples, 0.88%)</title><rect x="21.4912%" y="357" width="0.8772%" height="15" fill="rgb(211,81,21)" fg:x="49" fg:w="2"/><text x="21.7412%" y="367.50"></text></g><g><title>tlb_finish_mmu (1 samples, 0.44%)</title><rect x="21.9298%" y="341" width="0.4386%" height="15" fill="rgb(208,190,38)" fg:x="50" fg:w="1"/><text x="22.1798%" y="351.50"></text></g><g><title>flush_tlb_mm_range (1 samples, 0.44%)</title><rect x="21.9298%" y="325" width="0.4386%" height="15" fill="rgb(235,213,38)" fg:x="50" fg:w="1"/><text x="22.1798%" y="335.50"></text></g><g><title>flush_tlb_func (1 samples, 0.44%)</title><rect x="21.9298%" y="309" width="0.4386%" height="15" fill="rgb(237,122,38)" fg:x="50" fg:w="1"/><text x="22.1798%" y="319.50"></text></g><g><title>native_flush_tlb_local (1 samples, 0.44%)</title><rect x="21.9298%" y="293" width="0.4386%" height="15" fill="rgb(244,218,35)" fg:x="50" fg:w="1"/><text x="22.1798%" y="303.50"></text></g><g><title>[ld-linux-x86-64.so.2] (8 samples, 3.51%)</title><rect x="19.2982%" y="437" width="3.5088%" height="15" fill="rgb(240,68,47)" fg:x="44" fg:w="8"/><text x="19.5482%" y="447.50">[ld..</text></g><g><title>entry_SYSCALL_64 (1 samples, 0.44%)</title><rect x="22.3684%" y="421" width="0.4386%" height="15" fill="rgb(210,16,53)" fg:x="51" fg:w="1"/><text x="22.6184%" y="431.50"></text></g><g><title>do_syscall_64 (1 samples, 0.44%)</title><rect x="22.3684%" y="405" width="0.4386%" height="15" fill="rgb(235,124,12)" fg:x="51" fg:w="1"/><text x="22.6184%" y="415.50"></text></g><g><title>__x64_sys_munmap (1 samples, 0.44%)</title><rect x="22.3684%" y="389" width="0.4386%" height="15" fill="rgb(224,169,11)" fg:x="51" fg:w="1"/><text x="22.6184%" y="399.50"></text></g><g><title>__vm_munmap (1 samples, 0.44%)</title><rect x="22.3684%" y="373" width="0.4386%" height="15" fill="rgb(250,166,2)" fg:x="51" fg:w="1"/><text x="22.6184%" y="383.50"></text></g><g><title>do_mas_munmap (1 samples, 0.44%)</title><rect x="22.3684%" y="357" width="0.4386%" height="15" fill="rgb(242,216,29)" fg:x="51" fg:w="1"/><text x="22.6184%" y="367.50"></text></g><g><title>do_mas_align_munmap (1 samples, 0.44%)</title><rect x="22.3684%" y="341" width="0.4386%" height="15" fill="rgb(230,116,27)" fg:x="51" fg:w="1"/><text x="22.6184%" y="351.50"></text></g><g><title>unmap_region (1 samples, 0.44%)</title><rect x="22.3684%" y="325" width="0.4386%" height="15" fill="rgb(228,99,48)" fg:x="51" fg:w="1"/><text x="22.6184%" y="335.50"></text></g><g><title>lru_add_drain (1 samples, 0.44%)</title><rect x="22.3684%" y="309" width="0.4386%" height="15" fill="rgb(253,11,6)" fg:x="51" fg:w="1"/><text x="22.6184%" y="319.50"></text></g><g><title>lru_add_drain_cpu (1 samples, 0.44%)</title><rect x="22.3684%" y="293" width="0.4386%" height="15" fill="rgb(247,143,39)" fg:x="51" fg:w="1"/><text x="22.6184%" y="303.50"></text></g><g><title>folio_batch_move_lru (1 samples, 0.44%)</title><rect x="22.3684%" y="277" width="0.4386%" height="15" fill="rgb(236,97,10)" fg:x="51" fg:w="1"/><text x="22.6184%" y="287.50"></text></g><g><title>lru_add_fn (1 samples, 0.44%)</title><rect x="22.3684%" y="261" width="0.4386%" height="15" fill="rgb(233,208,19)" fg:x="51" fg:w="1"/><text x="22.6184%" y="271.50"></text></g><g><title>lru_gen_add_folio (1 samples, 0.44%)</title><rect x="22.3684%" y="245" width="0.4386%" height="15" fill="rgb(216,164,2)" fg:x="51" fg:w="1"/><text x="22.6184%" y="255.50"></text></g><g><title>[libc.so.6] (1 samples, 0.44%)</title><rect x="22.8070%" y="437" width="0.4386%" height="15" fill="rgb(220,129,5)" fg:x="52" fg:w="1"/><text x="23.0570%" y="447.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.44%)</title><rect x="22.8070%" y="421" width="0.4386%" height="15" fill="rgb(242,17,10)" fg:x="52" fg:w="1"/><text x="23.0570%" y="431.50"></text></g><g><title>exc_page_fault (1 samples, 0.44%)</title><rect x="22.8070%" y="405" width="0.4386%" height="15" fill="rgb(242,107,0)" fg:x="52" fg:w="1"/><text x="23.0570%" y="415.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.44%)</title><rect x="22.8070%" y="389" width="0.4386%" height="15" fill="rgb(251,28,31)" fg:x="52" fg:w="1"/><text x="23.0570%" y="399.50"></text></g><g><title>handle_mm_fault (1 samples, 0.44%)</title><rect x="22.8070%" y="373" width="0.4386%" height="15" fill="rgb(233,223,10)" fg:x="52" fg:w="1"/><text x="23.0570%" y="383.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.44%)</title><rect x="22.8070%" y="357" width="0.4386%" height="15" fill="rgb(215,21,27)" fg:x="52" fg:w="1"/><text x="23.0570%" y="367.50"></text></g><g><title>folio_add_lru (1 samples, 0.44%)</title><rect x="22.8070%" y="341" width="0.4386%" height="15" fill="rgb(232,23,21)" fg:x="52" fg:w="1"/><text x="23.0570%" y="351.50"></text></g><g><title>__do_sys_newfstatat (1 samples, 0.44%)</title><rect x="23.2456%" y="309" width="0.4386%" height="15" fill="rgb(244,5,23)" fg:x="53" fg:w="1"/><text x="23.4956%" y="319.50"></text></g><g><title>vfs_fstatat (1 samples, 0.44%)</title><rect x="23.2456%" y="293" width="0.4386%" height="15" fill="rgb(226,81,46)" fg:x="53" fg:w="1"/><text x="23.4956%" y="303.50"></text></g><g><title>vfs_statx (1 samples, 0.44%)</title><rect x="23.2456%" y="277" width="0.4386%" height="15" fill="rgb(247,70,30)" fg:x="53" fg:w="1"/><text x="23.4956%" y="287.50"></text></g><g><title>[[btrfs]] (1 samples, 0.44%)</title><rect x="23.2456%" y="261" width="0.4386%" height="15" fill="rgb(212,68,19)" fg:x="53" fg:w="1"/><text x="23.4956%" y="271.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.88%)</title><rect x="23.2456%" y="357" width="0.8772%" height="15" fill="rgb(240,187,13)" fg:x="53" fg:w="2"/><text x="23.4956%" y="367.50"></text></g><g><title>entry_SYSCALL_64 (2 samples, 0.88%)</title><rect x="23.2456%" y="341" width="0.8772%" height="15" fill="rgb(223,113,26)" fg:x="53" fg:w="2"/><text x="23.4956%" y="351.50"></text></g><g><title>do_syscall_64 (2 samples, 0.88%)</title><rect x="23.2456%" y="325" width="0.8772%" height="15" fill="rgb(206,192,2)" fg:x="53" fg:w="2"/><text x="23.4956%" y="335.50"></text></g><g><title>__x64_sys_openat (1 samples, 0.44%)</title><rect x="23.6842%" y="309" width="0.4386%" height="15" fill="rgb(241,108,4)" fg:x="54" fg:w="1"/><text x="23.9342%" y="319.50"></text></g><g><title>do_sys_openat2 (1 samples, 0.44%)</title><rect x="23.6842%" y="293" width="0.4386%" height="15" fill="rgb(247,173,49)" fg:x="54" fg:w="1"/><text x="23.9342%" y="303.50"></text></g><g><title>getname_flags.part.0 (1 samples, 0.44%)</title><rect x="23.6842%" y="277" width="0.4386%" height="15" fill="rgb(224,114,35)" fg:x="54" fg:w="1"/><text x="23.9342%" y="287.50"></text></g><g><title>kmem_cache_alloc (1 samples, 0.44%)</title><rect x="23.6842%" y="261" width="0.4386%" height="15" fill="rgb(245,159,27)" fg:x="54" fg:w="1"/><text x="23.9342%" y="271.50"></text></g><g><title>__memset (1 samples, 0.44%)</title><rect x="23.6842%" y="245" width="0.4386%" height="15" fill="rgb(245,172,44)" fg:x="54" fg:w="1"/><text x="23.9342%" y="255.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.44%)</title><rect x="24.1228%" y="357" width="0.4386%" height="15" fill="rgb(236,23,11)" fg:x="55" fg:w="1"/><text x="24.3728%" y="367.50"></text></g><g><title>__vma_adjust (1 samples, 0.44%)</title><rect x="25.0000%" y="213" width="0.4386%" height="15" fill="rgb(205,117,38)" fg:x="57" fg:w="1"/><text x="25.2500%" y="223.50"></text></g><g><title>vma_interval_tree_remove (1 samples, 0.44%)</title><rect x="25.0000%" y="197" width="0.4386%" height="15" fill="rgb(237,72,25)" fg:x="57" fg:w="1"/><text x="25.2500%" y="207.50"></text></g><g><title>__split_vma (2 samples, 0.88%)</title><rect x="25.0000%" y="229" width="0.8772%" height="15" fill="rgb(244,70,9)" fg:x="57" fg:w="2"/><text x="25.2500%" y="239.50"></text></g><g><title>vm_area_dup (1 samples, 0.44%)</title><rect x="25.4386%" y="213" width="0.4386%" height="15" fill="rgb(217,125,39)" fg:x="58" fg:w="1"/><text x="25.6886%" y="223.50"></text></g><g><title>lru_add_drain (1 samples, 0.44%)</title><rect x="25.8772%" y="213" width="0.4386%" height="15" fill="rgb(235,36,10)" fg:x="59" fg:w="1"/><text x="26.1272%" y="223.50"></text></g><g><title>lru_add_drain_cpu (1 samples, 0.44%)</title><rect x="25.8772%" y="197" width="0.4386%" height="15" fill="rgb(251,123,47)" fg:x="59" fg:w="1"/><text x="26.1272%" y="207.50"></text></g><g><title>folio_batch_move_lru (1 samples, 0.44%)</title><rect x="25.8772%" y="181" width="0.4386%" height="15" fill="rgb(221,13,13)" fg:x="59" fg:w="1"/><text x="26.1272%" y="191.50"></text></g><g><title>release_pages (1 samples, 0.44%)</title><rect x="25.8772%" y="165" width="0.4386%" height="15" fill="rgb(238,131,9)" fg:x="59" fg:w="1"/><text x="26.1272%" y="175.50"></text></g><g><title>__mem_cgroup_uncharge_list (1 samples, 0.44%)</title><rect x="25.8772%" y="149" width="0.4386%" height="15" fill="rgb(211,50,8)" fg:x="59" fg:w="1"/><text x="26.1272%" y="159.50"></text></g><g><title>do_mas_align_munmap (4 samples, 1.75%)</title><rect x="25.0000%" y="245" width="1.7544%" height="15" fill="rgb(245,182,24)" fg:x="57" fg:w="4"/><text x="25.2500%" y="255.50"></text></g><g><title>unmap_region (2 samples, 0.88%)</title><rect x="25.8772%" y="229" width="0.8772%" height="15" fill="rgb(242,14,37)" fg:x="59" fg:w="2"/><text x="26.1272%" y="239.50"></text></g><g><title>unmap_vmas (1 samples, 0.44%)</title><rect x="26.3158%" y="213" width="0.4386%" height="15" fill="rgb(246,228,12)" fg:x="60" fg:w="1"/><text x="26.5658%" y="223.50"></text></g><g><title>unmap_page_range (1 samples, 0.44%)</title><rect x="26.3158%" y="197" width="0.4386%" height="15" fill="rgb(213,55,15)" fg:x="60" fg:w="1"/><text x="26.5658%" y="207.50"></text></g><g><title>do_mas_munmap (5 samples, 2.19%)</title><rect x="25.0000%" y="261" width="2.1930%" height="15" fill="rgb(209,9,3)" fg:x="57" fg:w="5"/><text x="25.2500%" y="271.50">d..</text></g><g><title>mas_find (1 samples, 0.44%)</title><rect x="26.7544%" y="245" width="0.4386%" height="15" fill="rgb(230,59,30)" fg:x="61" fg:w="1"/><text x="27.0044%" y="255.50"></text></g><g><title>mas_walk (1 samples, 0.44%)</title><rect x="26.7544%" y="229" width="0.4386%" height="15" fill="rgb(209,121,21)" fg:x="61" fg:w="1"/><text x="27.0044%" y="239.50"></text></g><g><title>mas_next_entry (1 samples, 0.44%)</title><rect x="27.1930%" y="261" width="0.4386%" height="15" fill="rgb(220,109,13)" fg:x="62" fg:w="1"/><text x="27.4430%" y="271.50"></text></g><g><title>ksys_mmap_pgoff (8 samples, 3.51%)</title><rect x="24.5614%" y="325" width="3.5088%" height="15" fill="rgb(232,18,1)" fg:x="56" fg:w="8"/><text x="24.8114%" y="335.50">ksy..</text></g><g><title>vm_mmap_pgoff (8 samples, 3.51%)</title><rect x="24.5614%" y="309" width="3.5088%" height="15" fill="rgb(215,41,42)" fg:x="56" fg:w="8"/><text x="24.8114%" y="319.50">vm_..</text></g><g><title>do_mmap (8 samples, 3.51%)</title><rect x="24.5614%" y="293" width="3.5088%" height="15" fill="rgb(224,123,36)" fg:x="56" fg:w="8"/><text x="24.8114%" y="303.50">do_..</text></g><g><title>mmap_region (8 samples, 3.51%)</title><rect x="24.5614%" y="277" width="3.5088%" height="15" fill="rgb(240,125,3)" fg:x="56" fg:w="8"/><text x="24.8114%" y="287.50">mma..</text></g><g><title>vma_expand (1 samples, 0.44%)</title><rect x="27.6316%" y="261" width="0.4386%" height="15" fill="rgb(205,98,50)" fg:x="63" fg:w="1"/><text x="27.8816%" y="271.50"></text></g><g><title>mas_store_prealloc (1 samples, 0.44%)</title><rect x="27.6316%" y="245" width="0.4386%" height="15" fill="rgb(205,185,37)" fg:x="63" fg:w="1"/><text x="27.8816%" y="255.50"></text></g><g><title>mas_wr_modify (1 samples, 0.44%)</title><rect x="27.6316%" y="229" width="0.4386%" height="15" fill="rgb(238,207,15)" fg:x="63" fg:w="1"/><text x="27.8816%" y="239.50"></text></g><g><title>mas_wr_node_store (1 samples, 0.44%)</title><rect x="27.6316%" y="213" width="0.4386%" height="15" fill="rgb(213,199,42)" fg:x="63" fg:w="1"/><text x="27.8816%" y="223.50"></text></g><g><title>ksys_read (1 samples, 0.44%)</title><rect x="28.0702%" y="325" width="0.4386%" height="15" fill="rgb(235,201,11)" fg:x="64" fg:w="1"/><text x="28.3202%" y="335.50"></text></g><g><title>vfs_read (1 samples, 0.44%)</title><rect x="28.0702%" y="309" width="0.4386%" height="15" fill="rgb(207,46,11)" fg:x="64" fg:w="1"/><text x="28.3202%" y="319.50"></text></g><g><title>filemap_read (1 samples, 0.44%)</title><rect x="28.0702%" y="293" width="0.4386%" height="15" fill="rgb(241,35,35)" fg:x="64" fg:w="1"/><text x="28.3202%" y="303.50"></text></g><g><title>copy_page_to_iter (1 samples, 0.44%)</title><rect x="28.0702%" y="277" width="0.4386%" height="15" fill="rgb(243,32,47)" fg:x="64" fg:w="1"/><text x="28.3202%" y="287.50"></text></g><g><title>_copy_to_iter (1 samples, 0.44%)</title><rect x="28.0702%" y="261" width="0.4386%" height="15" fill="rgb(247,202,23)" fg:x="64" fg:w="1"/><text x="28.3202%" y="271.50"></text></g><g><title>copy_user_generic_string (1 samples, 0.44%)</title><rect x="28.0702%" y="245" width="0.4386%" height="15" fill="rgb(219,102,11)" fg:x="64" fg:w="1"/><text x="28.3202%" y="255.50"></text></g><g><title>[ld-linux-x86-64.so.2] (13 samples, 5.70%)</title><rect x="23.2456%" y="373" width="5.7018%" height="15" fill="rgb(243,110,44)" fg:x="53" fg:w="13"/><text x="23.4956%" y="383.50">[ld-lin..</text></g><g><title>entry_SYSCALL_64 (10 samples, 4.39%)</title><rect x="24.5614%" y="357" width="4.3860%" height="15" fill="rgb(222,74,54)" fg:x="56" fg:w="10"/><text x="24.8114%" y="367.50">entry..</text></g><g><title>do_syscall_64 (10 samples, 4.39%)</title><rect x="24.5614%" y="341" width="4.3860%" height="15" fill="rgb(216,99,12)" fg:x="56" fg:w="10"/><text x="24.8114%" y="351.50">do_sy..</text></g><g><title>vm_mmap_pgoff (1 samples, 0.44%)</title><rect x="28.5088%" y="325" width="0.4386%" height="15" fill="rgb(226,22,26)" fg:x="65" fg:w="1"/><text x="28.7588%" y="335.50"></text></g><g><title>do_mmap (1 samples, 0.44%)</title><rect x="28.5088%" y="309" width="0.4386%" height="15" fill="rgb(217,163,10)" fg:x="65" fg:w="1"/><text x="28.7588%" y="319.50"></text></g><g><title>mmap_region (1 samples, 0.44%)</title><rect x="28.5088%" y="293" width="0.4386%" height="15" fill="rgb(213,25,53)" fg:x="65" fg:w="1"/><text x="28.7588%" y="303.50"></text></g><g><title>do_mas_munmap (1 samples, 0.44%)</title><rect x="28.5088%" y="277" width="0.4386%" height="15" fill="rgb(252,105,26)" fg:x="65" fg:w="1"/><text x="28.7588%" y="287.50"></text></g><g><title>do_mas_align_munmap (1 samples, 0.44%)</title><rect x="28.5088%" y="261" width="0.4386%" height="15" fill="rgb(220,39,43)" fg:x="65" fg:w="1"/><text x="28.7588%" y="271.50"></text></g><g><title>unmap_region (1 samples, 0.44%)</title><rect x="28.5088%" y="245" width="0.4386%" height="15" fill="rgb(229,68,48)" fg:x="65" fg:w="1"/><text x="28.7588%" y="255.50"></text></g><g><title>unmap_vmas (1 samples, 0.44%)</title><rect x="28.5088%" y="229" width="0.4386%" height="15" fill="rgb(252,8,32)" fg:x="65" fg:w="1"/><text x="28.7588%" y="239.50"></text></g><g><title>unmap_page_range (1 samples, 0.44%)</title><rect x="28.5088%" y="213" width="0.4386%" height="15" fill="rgb(223,20,43)" fg:x="65" fg:w="1"/><text x="28.7588%" y="223.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.44%)</title><rect x="28.5088%" y="197" width="0.4386%" height="15" fill="rgb(229,81,49)" fg:x="65" fg:w="1"/><text x="28.7588%" y="207.50"></text></g><g><title>_dl_catch_exception (14 samples, 6.14%)</title><rect x="23.2456%" y="437" width="6.1404%" height="15" fill="rgb(236,28,36)" fg:x="53" fg:w="14"/><text x="23.4956%" y="447.50">_dl_catc..</text></g><g><title>[ld-linux-x86-64.so.2] (14 samples, 6.14%)</title><rect x="23.2456%" y="421" width="6.1404%" height="15" fill="rgb(249,185,26)" fg:x="53" fg:w="14"/><text x="23.4956%" y="431.50">[ld-linu..</text></g><g><title>[ld-linux-x86-64.so.2] (14 samples, 6.14%)</title><rect x="23.2456%" y="405" width="6.1404%" height="15" fill="rgb(249,174,33)" fg:x="53" fg:w="14"/><text x="23.4956%" y="415.50">[ld-linu..</text></g><g><title>[ld-linux-x86-64.so.2] (14 samples, 6.14%)</title><rect x="23.2456%" y="389" width="6.1404%" height="15" fill="rgb(233,201,37)" fg:x="53" fg:w="14"/><text x="23.4956%" y="399.50">[ld-linu..</text></g><g><title>asm_exc_page_fault (1 samples, 0.44%)</title><rect x="28.9474%" y="373" width="0.4386%" height="15" fill="rgb(221,78,26)" fg:x="66" fg:w="1"/><text x="29.1974%" y="383.50"></text></g><g><title>exc_page_fault (1 samples, 0.44%)</title><rect x="28.9474%" y="357" width="0.4386%" height="15" fill="rgb(250,127,30)" fg:x="66" fg:w="1"/><text x="29.1974%" y="367.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.44%)</title><rect x="28.9474%" y="341" width="0.4386%" height="15" fill="rgb(230,49,44)" fg:x="66" fg:w="1"/><text x="29.1974%" y="351.50"></text></g><g><title>handle_mm_fault (1 samples, 0.44%)</title><rect x="28.9474%" y="325" width="0.4386%" height="15" fill="rgb(229,67,23)" fg:x="66" fg:w="1"/><text x="29.1974%" y="335.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.44%)</title><rect x="28.9474%" y="309" width="0.4386%" height="15" fill="rgb(249,83,47)" fg:x="66" fg:w="1"/><text x="29.1974%" y="319.50"></text></g><g><title>do_wp_page (1 samples, 0.44%)</title><rect x="28.9474%" y="293" width="0.4386%" height="15" fill="rgb(215,43,3)" fg:x="66" fg:w="1"/><text x="29.1974%" y="303.50"></text></g><g><title>ptep_clear_flush (1 samples, 0.44%)</title><rect x="28.9474%" y="277" width="0.4386%" height="15" fill="rgb(238,154,13)" fg:x="66" fg:w="1"/><text x="29.1974%" y="287.50"></text></g><g><title>flush_tlb_mm_range (1 samples, 0.44%)</title><rect x="28.9474%" y="261" width="0.4386%" height="15" fill="rgb(219,56,2)" fg:x="66" fg:w="1"/><text x="29.1974%" y="271.50"></text></g><g><title>page_remove_rmap (1 samples, 0.44%)</title><rect x="29.8246%" y="341" width="0.4386%" height="15" fill="rgb(233,0,4)" fg:x="68" fg:w="1"/><text x="30.0746%" y="351.50"></text></g><g><title>__mod_lruvec_page_state (1 samples, 0.44%)</title><rect x="29.8246%" y="325" width="0.4386%" height="15" fill="rgb(235,30,7)" fg:x="68" fg:w="1"/><text x="30.0746%" y="335.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.44%)</title><rect x="29.8246%" y="309" width="0.4386%" height="15" fill="rgb(250,79,13)" fg:x="68" fg:w="1"/><text x="30.0746%" y="319.50"></text></g><g><title>cgroup_rstat_updated (1 samples, 0.44%)</title><rect x="29.8246%" y="293" width="0.4386%" height="15" fill="rgb(211,146,34)" fg:x="68" fg:w="1"/><text x="30.0746%" y="303.50"></text></g><g><title>[ld-linux-x86-64.so.2] (29 samples, 12.72%)</title><rect x="17.9825%" y="453" width="12.7193%" height="15" fill="rgb(228,22,38)" fg:x="41" fg:w="29"/><text x="18.2325%" y="463.50">[ld-linux-x86-64.so..</text></g><g><title>asm_exc_page_fault (3 samples, 1.32%)</title><rect x="29.3860%" y="437" width="1.3158%" height="15" fill="rgb(235,168,5)" fg:x="67" fg:w="3"/><text x="29.6360%" y="447.50"></text></g><g><title>exc_page_fault (2 samples, 0.88%)</title><rect x="29.8246%" y="421" width="0.8772%" height="15" fill="rgb(221,155,16)" fg:x="68" fg:w="2"/><text x="30.0746%" y="431.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.88%)</title><rect x="29.8246%" y="405" width="0.8772%" height="15" fill="rgb(215,215,53)" fg:x="68" fg:w="2"/><text x="30.0746%" y="415.50"></text></g><g><title>handle_mm_fault (2 samples, 0.88%)</title><rect x="29.8246%" y="389" width="0.8772%" height="15" fill="rgb(223,4,10)" fg:x="68" fg:w="2"/><text x="30.0746%" y="399.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.88%)</title><rect x="29.8246%" y="373" width="0.8772%" height="15" fill="rgb(234,103,6)" fg:x="68" fg:w="2"/><text x="30.0746%" y="383.50"></text></g><g><title>do_wp_page (2 samples, 0.88%)</title><rect x="29.8246%" y="357" width="0.8772%" height="15" fill="rgb(227,97,0)" fg:x="68" fg:w="2"/><text x="30.0746%" y="367.50"></text></g><g><title>vma_alloc_folio (1 samples, 0.44%)</title><rect x="30.2632%" y="341" width="0.4386%" height="15" fill="rgb(234,150,53)" fg:x="69" fg:w="1"/><text x="30.5132%" y="351.50"></text></g><g><title>__folio_alloc (1 samples, 0.44%)</title><rect x="30.2632%" y="325" width="0.4386%" height="15" fill="rgb(228,201,54)" fg:x="69" fg:w="1"/><text x="30.5132%" y="335.50"></text></g><g><title>__alloc_pages (1 samples, 0.44%)</title><rect x="30.2632%" y="309" width="0.4386%" height="15" fill="rgb(222,22,37)" fg:x="69" fg:w="1"/><text x="30.5132%" y="319.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.44%)</title><rect x="30.2632%" y="293" width="0.4386%" height="15" fill="rgb(237,53,32)" fg:x="69" fg:w="1"/><text x="30.5132%" y="303.50"></text></g><g><title>clear_page_rep (1 samples, 0.44%)</title><rect x="30.2632%" y="277" width="0.4386%" height="15" fill="rgb(233,25,53)" fg:x="69" fg:w="1"/><text x="30.5132%" y="287.50"></text></g><g><title>[ld-linux-x86-64.so.2] (30 samples, 13.16%)</title><rect x="17.9825%" y="517" width="13.1579%" height="15" fill="rgb(210,40,34)" fg:x="41" fg:w="30"/><text x="18.2325%" y="527.50">[ld-linux-x86-64.so...</text></g><g><title>[ld-linux-x86-64.so.2] (30 samples, 13.16%)</title><rect x="17.9825%" y="501" width="13.1579%" height="15" fill="rgb(241,220,44)" fg:x="41" fg:w="30"/><text x="18.2325%" y="511.50">[ld-linux-x86-64.so...</text></g><g><title>[ld-linux-x86-64.so.2] (30 samples, 13.16%)</title><rect x="17.9825%" y="485" width="13.1579%" height="15" fill="rgb(235,28,35)" fg:x="41" fg:w="30"/><text x="18.2325%" y="495.50">[ld-linux-x86-64.so...</text></g><g><title>[ld-linux-x86-64.so.2] (30 samples, 13.16%)</title><rect x="17.9825%" y="469" width="13.1579%" height="15" fill="rgb(210,56,17)" fg:x="41" fg:w="30"/><text x="18.2325%" y="479.50">[ld-linux-x86-64.so...</text></g><g><title>__libc_early_init (1 samples, 0.44%)</title><rect x="30.7018%" y="453" width="0.4386%" height="15" fill="rgb(224,130,29)" fg:x="70" fg:w="1"/><text x="30.9518%" y="463.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.44%)</title><rect x="30.7018%" y="437" width="0.4386%" height="15" fill="rgb(235,212,8)" fg:x="70" fg:w="1"/><text x="30.9518%" y="447.50"></text></g><g><title>exc_page_fault (1 samples, 0.44%)</title><rect x="30.7018%" y="421" width="0.4386%" height="15" fill="rgb(223,33,50)" fg:x="70" fg:w="1"/><text x="30.9518%" y="431.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.44%)</title><rect x="30.7018%" y="405" width="0.4386%" height="15" fill="rgb(219,149,13)" fg:x="70" fg:w="1"/><text x="30.9518%" y="415.50"></text></g><g><title>handle_mm_fault (1 samples, 0.44%)</title><rect x="30.7018%" y="389" width="0.4386%" height="15" fill="rgb(250,156,29)" fg:x="70" fg:w="1"/><text x="30.9518%" y="399.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.44%)</title><rect x="30.7018%" y="373" width="0.4386%" height="15" fill="rgb(216,193,19)" fg:x="70" fg:w="1"/><text x="30.9518%" y="383.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.44%)</title><rect x="30.7018%" y="357" width="0.4386%" height="15" fill="rgb(216,135,14)" fg:x="70" fg:w="1"/><text x="30.9518%" y="367.50"></text></g><g><title>[libc.so.6] (2 samples, 0.88%)</title><rect x="31.1404%" y="517" width="0.8772%" height="15" fill="rgb(241,47,5)" fg:x="71" fg:w="2"/><text x="31.3904%" y="527.50"></text></g><g><title>&lt;&lt;rust::Input as core::str::traits::FromStr&gt;::from_str::RE_CD as core::ops::deref::Deref&gt;::deref (2 samples, 0.88%)</title><rect x="38.5965%" y="501" width="0.8772%" height="15" fill="rgb(233,42,35)" fg:x="88" fg:w="2"/><text x="38.8465%" y="511.50"></text></g><g><title>&lt;&lt;rust::Input as core::str::traits::FromStr&gt;::from_str::RE_CD as core::ops::deref::Deref&gt;::deref::__stability (2 samples, 0.88%)</title><rect x="38.5965%" y="485" width="0.8772%" height="15" fill="rgb(231,13,6)" fg:x="88" fg:w="2"/><text x="38.8465%" y="495.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (2 samples, 0.88%)</title><rect x="38.5965%" y="469" width="0.8772%" height="15" fill="rgb(207,181,40)" fg:x="88" fg:w="2"/><text x="38.8465%" y="479.50"></text></g><g><title>std::sync::once::Once::call_once (1 samples, 0.44%)</title><rect x="39.0351%" y="453" width="0.4386%" height="15" fill="rgb(254,173,49)" fg:x="89" fg:w="1"/><text x="39.2851%" y="463.50"></text></g><g><title>std::sync::once::Once::call_once::{{closure}} (1 samples, 0.44%)</title><rect x="39.0351%" y="437" width="0.4386%" height="15" fill="rgb(221,1,38)" fg:x="89" fg:w="1"/><text x="39.2851%" y="447.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get::{{closure}} (1 samples, 0.44%)</title><rect x="39.0351%" y="421" width="0.4386%" height="15" fill="rgb(206,124,46)" fg:x="89" fg:w="1"/><text x="39.2851%" y="431.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.44%)</title><rect x="39.0351%" y="405" width="0.4386%" height="15" fill="rgb(249,21,11)" fg:x="89" fg:w="1"/><text x="39.2851%" y="415.50"></text></g><g><title>&lt;&lt;rust::Input as core::str::traits::FromStr&gt;::from_str::RE_CD as core::ops::deref::Deref&gt;::deref::__static_ref_initialize (1 samples, 0.44%)</title><rect x="39.0351%" y="389" width="0.4386%" height="15" fill="rgb(222,201,40)" fg:x="89" fg:w="1"/><text x="39.2851%" y="399.50"></text></g><g><title>regex::re_builder::unicode::RegexBuilder::build (1 samples, 0.44%)</title><rect x="39.0351%" y="373" width="0.4386%" height="15" fill="rgb(235,61,29)" fg:x="89" fg:w="1"/><text x="39.2851%" y="383.50"></text></g><g><title>regex::exec::ExecBuilder::parse (1 samples, 0.44%)</title><rect x="39.0351%" y="357" width="0.4386%" height="15" fill="rgb(219,207,3)" fg:x="89" fg:w="1"/><text x="39.2851%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.44%)</title><rect x="39.0351%" y="341" width="0.4386%" height="15" fill="rgb(222,56,46)" fg:x="89" fg:w="1"/><text x="39.2851%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse (1 samples, 0.44%)</title><rect x="39.0351%" y="325" width="0.4386%" height="15" fill="rgb(239,76,54)" fg:x="89" fg:w="1"/><text x="39.2851%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_primitive (1 samples, 0.44%)</title><rect x="39.0351%" y="309" width="0.4386%" height="15" fill="rgb(231,124,27)" fg:x="89" fg:w="1"/><text x="39.2851%" y="319.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.44%)</title><rect x="39.4737%" y="501" width="0.4386%" height="15" fill="rgb(249,195,6)" fg:x="90" fg:w="1"/><text x="39.7237%" y="511.50"></text></g><g><title>[libc.so.6] (2 samples, 0.88%)</title><rect x="39.9123%" y="501" width="0.8772%" height="15" fill="rgb(237,174,47)" fg:x="91" fg:w="2"/><text x="40.1623%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.44%)</title><rect x="40.7895%" y="501" width="0.4386%" height="15" fill="rgb(206,201,31)" fg:x="93" fg:w="1"/><text x="41.0395%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (1 samples, 0.44%)</title><rect x="41.2281%" y="501" width="0.4386%" height="15" fill="rgb(231,57,52)" fg:x="94" fg:w="1"/><text x="41.4781%" y="511.50"></text></g><g><title>core::ptr::write (1 samples, 0.44%)</title><rect x="41.2281%" y="485" width="0.4386%" height="15" fill="rgb(248,177,22)" fg:x="94" fg:w="1"/><text x="41.4781%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1 samples, 0.44%)</title><rect x="41.6667%" y="501" width="0.4386%" height="15" fill="rgb(215,211,37)" fg:x="95" fg:w="1"/><text x="41.9167%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.44%)</title><rect x="42.1053%" y="501" width="0.4386%" height="15" fill="rgb(241,128,51)" fg:x="96" fg:w="1"/><text x="42.3553%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.44%)</title><rect x="42.1053%" y="485" width="0.4386%" height="15" fill="rgb(227,165,31)" fg:x="96" fg:w="1"/><text x="42.3553%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.44%)</title><rect x="42.1053%" y="469" width="0.4386%" height="15" fill="rgb(228,167,24)" fg:x="96" fg:w="1"/><text x="42.3553%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.44%)</title><rect x="42.1053%" y="453" width="0.4386%" height="15" fill="rgb(228,143,12)" fg:x="96" fg:w="1"/><text x="42.3553%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.44%)</title><rect x="42.1053%" y="437" width="0.4386%" height="15" fill="rgb(249,149,8)" fg:x="96" fg:w="1"/><text x="42.3553%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.44%)</title><rect x="42.1053%" y="421" width="0.4386%" height="15" fill="rgb(243,35,44)" fg:x="96" fg:w="1"/><text x="42.3553%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::dfa::State&gt; (2 samples, 0.88%)</title><rect x="42.5439%" y="501" width="0.8772%" height="15" fill="rgb(246,89,9)" fg:x="97" fg:w="2"/><text x="42.7939%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;[u8]&gt;&gt; (2 samples, 0.88%)</title><rect x="42.5439%" y="485" width="0.8772%" height="15" fill="rgb(233,213,13)" fg:x="97" fg:w="2"/><text x="42.7939%" y="495.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.88%)</title><rect x="42.5439%" y="469" width="0.8772%" height="15" fill="rgb(233,141,41)" fg:x="97" fg:w="2"/><text x="42.7939%" y="479.50"></text></g><g><title>memchr::memmem::Searcher::find (1 samples, 0.44%)</title><rect x="42.9825%" y="453" width="0.4386%" height="15" fill="rgb(239,167,4)" fg:x="98" fg:w="1"/><text x="43.2325%" y="463.50"></text></g><g><title>memchr::memmem::rabinkarp::find_with (1 samples, 0.44%)</title><rect x="42.9825%" y="437" width="0.4386%" height="15" fill="rgb(209,217,16)" fg:x="98" fg:w="1"/><text x="43.2325%" y="447.50"></text></g><g><title>memchr::memmem::rabinkarp::NeedleHash::eq (1 samples, 0.44%)</title><rect x="42.9825%" y="421" width="0.4386%" height="15" fill="rgb(219,88,35)" fg:x="98" fg:w="1"/><text x="43.2325%" y="431.50"></text></g><g><title>&lt;memchr::memmem::rabinkarp::Hash as core::cmp::PartialEq&gt;::eq (1 samples, 0.44%)</title><rect x="42.9825%" y="405" width="0.4386%" height="15" fill="rgb(220,193,23)" fg:x="98" fg:w="1"/><text x="43.2325%" y="415.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (2 samples, 0.88%)</title><rect x="43.4211%" y="501" width="0.8772%" height="15" fill="rgb(230,90,52)" fg:x="99" fg:w="2"/><text x="43.6711%" y="511.50"></text></g><g><title>core::slice::memchr::memchr_naive (1 samples, 0.44%)</title><rect x="44.2982%" y="501" width="0.4386%" height="15" fill="rgb(252,106,19)" fg:x="101" fg:w="1"/><text x="44.5482%" y="511.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (1 samples, 0.44%)</title><rect x="44.7368%" y="501" width="0.4386%" height="15" fill="rgb(206,74,20)" fg:x="102" fg:w="1"/><text x="44.9868%" y="511.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (1 samples, 0.44%)</title><rect x="44.7368%" y="485" width="0.4386%" height="15" fill="rgb(230,138,44)" fg:x="102" fg:w="1"/><text x="44.9868%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (1 samples, 0.44%)</title><rect x="44.7368%" y="469" width="0.4386%" height="15" fill="rgb(235,182,43)" fg:x="102" fg:w="1"/><text x="44.9868%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (1 samples, 0.44%)</title><rect x="44.7368%" y="453" width="0.4386%" height="15" fill="rgb(242,16,51)" fg:x="102" fg:w="1"/><text x="44.9868%" y="463.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (1 samples, 0.44%)</title><rect x="44.7368%" y="437" width="0.4386%" height="15" fill="rgb(248,9,4)" fg:x="102" fg:w="1"/><text x="44.9868%" y="447.50"></text></g><g><title>core::intrinsics::write_bytes (1 samples, 0.44%)</title><rect x="44.7368%" y="421" width="0.4386%" height="15" fill="rgb(210,31,22)" fg:x="102" fg:w="1"/><text x="44.9868%" y="431.50"></text></g><g><title>malloc (3 samples, 1.32%)</title><rect x="45.1754%" y="501" width="1.3158%" height="15" fill="rgb(239,54,39)" fg:x="103" fg:w="3"/><text x="45.4254%" y="511.50"></text></g><g><title>memchr::memmem::Searcher::find (1 samples, 0.44%)</title><rect x="46.4912%" y="501" width="0.4386%" height="15" fill="rgb(230,99,41)" fg:x="106" fg:w="1"/><text x="46.7412%" y="511.50"></text></g><g><title>memchr::memmem::rabinkarp::find_with (1 samples, 0.44%)</title><rect x="46.4912%" y="485" width="0.4386%" height="15" fill="rgb(253,106,12)" fg:x="106" fg:w="1"/><text x="46.7412%" y="495.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::has_visited (1 samples, 0.44%)</title><rect x="46.9298%" y="485" width="0.4386%" height="15" fill="rgb(213,46,41)" fg:x="107" fg:w="1"/><text x="47.1798%" y="495.50"></text></g><g><title>&lt;regex::input::CharInput as regex::input::Input&gt;::len (1 samples, 0.44%)</title><rect x="46.9298%" y="469" width="0.4386%" height="15" fill="rgb(215,133,35)" fg:x="107" fg:w="1"/><text x="47.1798%" y="479.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::step (2 samples, 0.88%)</title><rect x="46.9298%" y="501" width="0.8772%" height="15" fill="rgb(213,28,5)" fg:x="107" fg:w="2"/><text x="47.1798%" y="511.50"></text></g><g><title>regex::input::&lt;impl core::cmp::PartialEq&lt;regex::input::Char&gt; for char&gt;::eq (1 samples, 0.44%)</title><rect x="47.3684%" y="485" width="0.4386%" height="15" fill="rgb(215,77,49)" fg:x="108" fg:w="1"/><text x="47.6184%" y="495.50"></text></g><g><title>regex::compile::CompileClass::compile (1 samples, 0.44%)</title><rect x="47.8070%" y="485" width="0.4386%" height="15" fill="rgb(248,100,22)" fg:x="109" fg:w="1"/><text x="48.0570%" y="495.50"></text></g><g><title>regex::compile::CompileClass::c_utf8_seq_ (1 samples, 0.44%)</title><rect x="47.8070%" y="469" width="0.4386%" height="15" fill="rgb(208,67,9)" fg:x="109" fg:w="1"/><text x="48.0570%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.44%)</title><rect x="48.6842%" y="437" width="0.4386%" height="15" fill="rgb(219,133,21)" fg:x="111" fg:w="1"/><text x="48.9342%" y="447.50"></text></g><g><title>__default_morecore (1 samples, 0.44%)</title><rect x="49.1228%" y="277" width="0.4386%" height="15" fill="rgb(246,46,29)" fg:x="112" fg:w="1"/><text x="49.3728%" y="287.50"></text></g><g><title>__sbrk (1 samples, 0.44%)</title><rect x="49.1228%" y="261" width="0.4386%" height="15" fill="rgb(246,185,52)" fg:x="112" fg:w="1"/><text x="49.3728%" y="271.50"></text></g><g><title>brk (1 samples, 0.44%)</title><rect x="49.1228%" y="245" width="0.4386%" height="15" fill="rgb(252,136,11)" fg:x="112" fg:w="1"/><text x="49.3728%" y="255.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.44%)</title><rect x="49.1228%" y="229" width="0.4386%" height="15" fill="rgb(219,138,53)" fg:x="112" fg:w="1"/><text x="49.3728%" y="239.50"></text></g><g><title>do_syscall_64 (1 samples, 0.44%)</title><rect x="49.1228%" y="213" width="0.4386%" height="15" fill="rgb(211,51,23)" fg:x="112" fg:w="1"/><text x="49.3728%" y="223.50"></text></g><g><title>__do_sys_brk (1 samples, 0.44%)</title><rect x="49.1228%" y="197" width="0.4386%" height="15" fill="rgb(247,221,28)" fg:x="112" fg:w="1"/><text x="49.3728%" y="207.50"></text></g><g><title>do_mas_align_munmap (1 samples, 0.44%)</title><rect x="49.1228%" y="181" width="0.4386%" height="15" fill="rgb(251,222,45)" fg:x="112" fg:w="1"/><text x="49.3728%" y="191.50"></text></g><g><title>vm_area_free (1 samples, 0.44%)</title><rect x="49.1228%" y="165" width="0.4386%" height="15" fill="rgb(217,162,53)" fg:x="112" fg:w="1"/><text x="49.3728%" y="175.50"></text></g><g><title>regex::compile::Compiler::compile_one (5 samples, 2.19%)</title><rect x="47.8070%" y="501" width="2.1930%" height="15" fill="rgb(229,93,14)" fg:x="109" fg:w="5"/><text x="48.0570%" y="511.50">r..</text></g><g><title>regex::compile::Compiler::c_concat (4 samples, 1.75%)</title><rect x="48.2456%" y="485" width="1.7544%" height="15" fill="rgb(209,67,49)" fg:x="110" fg:w="4"/><text x="48.4956%" y="495.50"></text></g><g><title>regex::compile::CompileClass::compile (4 samples, 1.75%)</title><rect x="48.2456%" y="469" width="1.7544%" height="15" fill="rgb(213,87,29)" fg:x="110" fg:w="4"/><text x="48.4956%" y="479.50"></text></g><g><title>regex::compile::CompileClass::c_utf8_seq_ (4 samples, 1.75%)</title><rect x="48.2456%" y="453" width="1.7544%" height="15" fill="rgb(205,151,52)" fg:x="110" fg:w="4"/><text x="48.4956%" y="463.50"></text></g><g><title>regex::compile::Compiler::push_compiled (2 samples, 0.88%)</title><rect x="49.1228%" y="437" width="0.8772%" height="15" fill="rgb(253,215,39)" fg:x="112" fg:w="2"/><text x="49.3728%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.88%)</title><rect x="49.1228%" y="421" width="0.8772%" height="15" fill="rgb(221,220,41)" fg:x="112" fg:w="2"/><text x="49.3728%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.88%)</title><rect x="49.1228%" y="405" width="0.8772%" height="15" fill="rgb(218,133,21)" fg:x="112" fg:w="2"/><text x="49.3728%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.88%)</title><rect x="49.1228%" y="389" width="0.8772%" height="15" fill="rgb(221,193,43)" fg:x="112" fg:w="2"/><text x="49.3728%" y="399.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.88%)</title><rect x="49.1228%" y="373" width="0.8772%" height="15" fill="rgb(240,128,52)" fg:x="112" fg:w="2"/><text x="49.3728%" y="383.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.88%)</title><rect x="49.1228%" y="357" width="0.8772%" height="15" fill="rgb(253,114,12)" fg:x="112" fg:w="2"/><text x="49.3728%" y="367.50"></text></g><g><title>realloc (2 samples, 0.88%)</title><rect x="49.1228%" y="341" width="0.8772%" height="15" fill="rgb(215,223,47)" fg:x="112" fg:w="2"/><text x="49.3728%" y="351.50"></text></g><g><title>[libc.so.6] (2 samples, 0.88%)</title><rect x="49.1228%" y="325" width="0.8772%" height="15" fill="rgb(248,225,23)" fg:x="112" fg:w="2"/><text x="49.3728%" y="335.50"></text></g><g><title>[libc.so.6] (2 samples, 0.88%)</title><rect x="49.1228%" y="309" width="0.8772%" height="15" fill="rgb(250,108,0)" fg:x="112" fg:w="2"/><text x="49.3728%" y="319.50"></text></g><g><title>[libc.so.6] (2 samples, 0.88%)</title><rect x="49.1228%" y="293" width="0.8772%" height="15" fill="rgb(228,208,7)" fg:x="112" fg:w="2"/><text x="49.3728%" y="303.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.44%)</title><rect x="49.5614%" y="277" width="0.4386%" height="15" fill="rgb(244,45,10)" fg:x="113" fg:w="1"/><text x="49.8114%" y="287.50"></text></g><g><title>exc_page_fault (1 samples, 0.44%)</title><rect x="49.5614%" y="261" width="0.4386%" height="15" fill="rgb(207,125,25)" fg:x="113" fg:w="1"/><text x="49.8114%" y="271.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.44%)</title><rect x="49.5614%" y="245" width="0.4386%" height="15" fill="rgb(210,195,18)" fg:x="113" fg:w="1"/><text x="49.8114%" y="255.50"></text></g><g><title>handle_mm_fault (1 samples, 0.44%)</title><rect x="49.5614%" y="229" width="0.4386%" height="15" fill="rgb(249,80,12)" fg:x="113" fg:w="1"/><text x="49.8114%" y="239.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.44%)</title><rect x="49.5614%" y="213" width="0.4386%" height="15" fill="rgb(221,65,9)" fg:x="113" fg:w="1"/><text x="49.8114%" y="223.50"></text></g><g><title>vma_alloc_folio (1 samples, 0.44%)</title><rect x="49.5614%" y="197" width="0.4386%" height="15" fill="rgb(235,49,36)" fg:x="113" fg:w="1"/><text x="49.8114%" y="207.50"></text></g><g><title>regex::dfa::Byte::is_ascii_word (1 samples, 0.44%)</title><rect x="50.0000%" y="501" width="0.4386%" height="15" fill="rgb(225,32,20)" fg:x="114" fg:w="1"/><text x="50.2500%" y="511.50"></text></g><g><title>regex::dfa::Fsm::exec_byte (1 samples, 0.44%)</title><rect x="50.4386%" y="501" width="0.4386%" height="15" fill="rgb(215,141,46)" fg:x="115" fg:w="1"/><text x="50.6886%" y="511.50"></text></g><g><title>&lt;regex::dfa::InstPtrs as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.44%)</title><rect x="50.4386%" y="485" width="0.4386%" height="15" fill="rgb(250,160,47)" fg:x="115" fg:w="1"/><text x="50.6886%" y="495.50"></text></g><g><title>regex::dfa::read_vari32 (1 samples, 0.44%)</title><rect x="50.4386%" y="469" width="0.4386%" height="15" fill="rgb(216,222,40)" fg:x="115" fg:w="1"/><text x="50.6886%" y="479.50"></text></g><g><title>regex::dfa::read_varu32 (1 samples, 0.44%)</title><rect x="50.4386%" y="453" width="0.4386%" height="15" fill="rgb(234,217,39)" fg:x="115" fg:w="1"/><text x="50.6886%" y="463.50"></text></g><g><title>regex::exec::Exec::searcher_str (1 samples, 0.44%)</title><rect x="50.8772%" y="501" width="0.4386%" height="15" fill="rgb(207,178,40)" fg:x="116" fg:w="1"/><text x="51.1272%" y="511.50"></text></g><g><title>regex::exec::Exec::searcher (1 samples, 0.44%)</title><rect x="50.8772%" y="485" width="0.4386%" height="15" fill="rgb(221,136,13)" fg:x="116" fg:w="1"/><text x="51.1272%" y="495.50"></text></g><g><title>regex::pool::Pool&lt;T&gt;::get (1 samples, 0.44%)</title><rect x="50.8772%" y="469" width="0.4386%" height="15" fill="rgb(249,199,10)" fg:x="116" fg:w="1"/><text x="51.1272%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.44%)</title><rect x="50.8772%" y="453" width="0.4386%" height="15" fill="rgb(249,222,13)" fg:x="116" fg:w="1"/><text x="51.1272%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.44%)</title><rect x="50.8772%" y="437" width="0.4386%" height="15" fill="rgb(244,185,38)" fg:x="116" fg:w="1"/><text x="51.1272%" y="447.50"></text></g><g><title>regex::dfa::Fsm::forward (4 samples, 1.75%)</title><rect x="51.3158%" y="485" width="1.7544%" height="15" fill="rgb(236,202,9)" fg:x="117" fg:w="4"/><text x="51.5658%" y="495.50"></text></g><g><title>regex::dfa::Fsm::exec_at (3 samples, 1.32%)</title><rect x="51.7544%" y="469" width="1.3158%" height="15" fill="rgb(250,229,37)" fg:x="118" fg:w="3"/><text x="52.0044%" y="479.50"></text></g><g><title>regex::dfa::Fsm::next_si (1 samples, 0.44%)</title><rect x="52.6316%" y="453" width="0.4386%" height="15" fill="rgb(206,174,23)" fg:x="120" fg:w="1"/><text x="52.8816%" y="463.50"></text></g><g><title>regex::dfa::Transitions::next_unchecked (1 samples, 0.44%)</title><rect x="52.6316%" y="437" width="0.4386%" height="15" fill="rgb(211,33,43)" fg:x="120" fg:w="1"/><text x="52.8816%" y="447.50"></text></g><g><title>regex::exec::ExecNoSync::find_dfa_forward (6 samples, 2.63%)</title><rect x="51.3158%" y="501" width="2.6316%" height="15" fill="rgb(245,58,50)" fg:x="117" fg:w="6"/><text x="51.5658%" y="511.50">re..</text></g><g><title>regex::dfa::Fsm::reverse (2 samples, 0.88%)</title><rect x="53.0702%" y="485" width="0.8772%" height="15" fill="rgb(244,68,36)" fg:x="121" fg:w="2"/><text x="53.3202%" y="495.50"></text></g><g><title>regex::dfa::Fsm::exec_at_reverse (2 samples, 0.88%)</title><rect x="53.0702%" y="469" width="0.8772%" height="15" fill="rgb(232,229,15)" fg:x="121" fg:w="2"/><text x="53.3202%" y="479.50"></text></g><g><title>regex::dfa::Fsm::next_si (1 samples, 0.44%)</title><rect x="53.5088%" y="453" width="0.4386%" height="15" fill="rgb(254,30,23)" fg:x="122" fg:w="1"/><text x="53.7588%" y="463.50"></text></g><g><title>regex::re_trait::RegularExpression::locations (1 samples, 0.44%)</title><rect x="53.9474%" y="501" width="0.4386%" height="15" fill="rgb(235,160,14)" fg:x="123" fg:w="1"/><text x="54.1974%" y="511.50"></text></g><g><title>&lt;regex::exec::ExecNoSyncStr as regex::re_trait::RegularExpression&gt;::slots_len (1 samples, 0.44%)</title><rect x="53.9474%" y="485" width="0.4386%" height="15" fill="rgb(212,155,44)" fg:x="123" fg:w="1"/><text x="54.1974%" y="495.50"></text></g><g><title>&lt;regex::exec::ExecNoSync as regex::re_trait::RegularExpression&gt;::slots_len (1 samples, 0.44%)</title><rect x="53.9474%" y="469" width="0.4386%" height="15" fill="rgb(226,2,50)" fg:x="123" fg:w="1"/><text x="54.1974%" y="479.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.44%)</title><rect x="53.9474%" y="453" width="0.4386%" height="15" fill="rgb(234,177,6)" fg:x="123" fg:w="1"/><text x="54.1974%" y="463.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (1 samples, 0.44%)</title><rect x="53.9474%" y="437" width="0.4386%" height="15" fill="rgb(217,24,9)" fg:x="123" fg:w="1"/><text x="54.1974%" y="447.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.44%)</title><rect x="53.9474%" y="421" width="0.4386%" height="15" fill="rgb(220,13,46)" fg:x="123" fg:w="1"/><text x="54.1974%" y="431.50"></text></g><g><title>[unknown] (52 samples, 22.81%)</title><rect x="32.0175%" y="517" width="22.8070%" height="15" fill="rgb(239,221,27)" fg:x="73" fg:w="52"/><text x="32.2675%" y="527.50">[unknown]</text></g><g><title>std::io::stdio::Stdout::lock (1 samples, 0.44%)</title><rect x="54.3860%" y="501" width="0.4386%" height="15" fill="rgb(222,198,25)" fg:x="124" fg:w="1"/><text x="54.6360%" y="511.50"></text></g><g><title>std::sys_common::remutex::ReentrantMutex&lt;T&gt;::lock (1 samples, 0.44%)</title><rect x="54.3860%" y="485" width="0.4386%" height="15" fill="rgb(211,99,13)" fg:x="124" fg:w="1"/><text x="54.6360%" y="495.50"></text></g><g><title>exit (1 samples, 0.44%)</title><rect x="54.8246%" y="485" width="0.4386%" height="15" fill="rgb(232,111,31)" fg:x="125" fg:w="1"/><text x="55.0746%" y="495.50"></text></g><g><title>[libc.so.6] (1 samples, 0.44%)</title><rect x="54.8246%" y="469" width="0.4386%" height="15" fill="rgb(245,82,37)" fg:x="125" fg:w="1"/><text x="55.0746%" y="479.50"></text></g><g><title>_exit (1 samples, 0.44%)</title><rect x="54.8246%" y="453" width="0.4386%" height="15" fill="rgb(227,149,46)" fg:x="125" fg:w="1"/><text x="55.0746%" y="463.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.44%)</title><rect x="54.8246%" y="437" width="0.4386%" height="15" fill="rgb(218,36,50)" fg:x="125" fg:w="1"/><text x="55.0746%" y="447.50"></text></g><g><title>do_syscall_64 (1 samples, 0.44%)</title><rect x="54.8246%" y="421" width="0.4386%" height="15" fill="rgb(226,80,48)" fg:x="125" fg:w="1"/><text x="55.0746%" y="431.50"></text></g><g><title>[vmlinux] (1 samples, 0.44%)</title><rect x="54.8246%" y="405" width="0.4386%" height="15" fill="rgb(238,224,15)" fg:x="125" fg:w="1"/><text x="55.0746%" y="415.50"></text></g><g><title>do_group_exit (1 samples, 0.44%)</title><rect x="54.8246%" y="389" width="0.4386%" height="15" fill="rgb(241,136,10)" fg:x="125" fg:w="1"/><text x="55.0746%" y="399.50"></text></g><g><title>do_exit (1 samples, 0.44%)</title><rect x="54.8246%" y="373" width="0.4386%" height="15" fill="rgb(208,32,45)" fg:x="125" fg:w="1"/><text x="55.0746%" y="383.50"></text></g><g><title>exit_signals (1 samples, 0.44%)</title><rect x="54.8246%" y="357" width="0.4386%" height="15" fill="rgb(207,135,9)" fg:x="125" fg:w="1"/><text x="55.0746%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 0.88%)</title><rect x="55.2632%" y="437" width="0.8772%" height="15" fill="rgb(206,86,44)" fg:x="126" fg:w="2"/><text x="55.5132%" y="447.50"></text></g><g><title>std::rt::cleanup (2 samples, 0.88%)</title><rect x="55.2632%" y="421" width="0.8772%" height="15" fill="rgb(245,177,15)" fg:x="126" fg:w="2"/><text x="55.5132%" y="431.50"></text></g><g><title>std::sync::once::Once::call_once (2 samples, 0.88%)</title><rect x="55.2632%" y="405" width="0.8772%" height="15" fill="rgb(206,64,50)" fg:x="126" fg:w="2"/><text x="55.5132%" y="415.50"></text></g><g><title>std::sync::once::Once::call_once::{{closure}} (2 samples, 0.88%)</title><rect x="55.2632%" y="389" width="0.8772%" height="15" fill="rgb(234,36,40)" fg:x="126" fg:w="2"/><text x="55.5132%" y="399.50"></text></g><g><title>std::rt::cleanup::{{closure}} (2 samples, 0.88%)</title><rect x="55.2632%" y="373" width="0.8772%" height="15" fill="rgb(213,64,8)" fg:x="126" fg:w="2"/><text x="55.5132%" y="383.50"></text></g><g><title>std::sys::unix::cleanup (2 samples, 0.88%)</title><rect x="55.2632%" y="357" width="0.8772%" height="15" fill="rgb(210,75,36)" fg:x="126" fg:w="2"/><text x="55.5132%" y="367.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::cleanup (2 samples, 0.88%)</title><rect x="55.2632%" y="341" width="0.8772%" height="15" fill="rgb(229,88,21)" fg:x="126" fg:w="2"/><text x="55.5132%" y="351.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::drop_handler (2 samples, 0.88%)</title><rect x="55.2632%" y="325" width="0.8772%" height="15" fill="rgb(252,204,47)" fg:x="126" fg:w="2"/><text x="55.5132%" y="335.50"></text></g><g><title>__munmap (2 samples, 0.88%)</title><rect x="55.2632%" y="309" width="0.8772%" height="15" fill="rgb(208,77,27)" fg:x="126" fg:w="2"/><text x="55.5132%" y="319.50"></text></g><g><title>entry_SYSCALL_64 (2 samples, 0.88%)</title><rect x="55.2632%" y="293" width="0.8772%" height="15" fill="rgb(221,76,26)" fg:x="126" fg:w="2"/><text x="55.5132%" y="303.50"></text></g><g><title>do_syscall_64 (2 samples, 0.88%)</title><rect x="55.2632%" y="277" width="0.8772%" height="15" fill="rgb(225,139,18)" fg:x="126" fg:w="2"/><text x="55.5132%" y="287.50"></text></g><g><title>__x64_sys_munmap (2 samples, 0.88%)</title><rect x="55.2632%" y="261" width="0.8772%" height="15" fill="rgb(230,137,11)" fg:x="126" fg:w="2"/><text x="55.5132%" y="271.50"></text></g><g><title>__vm_munmap (2 samples, 0.88%)</title><rect x="55.2632%" y="245" width="0.8772%" height="15" fill="rgb(212,28,1)" fg:x="126" fg:w="2"/><text x="55.5132%" y="255.50"></text></g><g><title>do_mas_munmap (2 samples, 0.88%)</title><rect x="55.2632%" y="229" width="0.8772%" height="15" fill="rgb(248,164,17)" fg:x="126" fg:w="2"/><text x="55.5132%" y="239.50"></text></g><g><title>do_mas_align_munmap (2 samples, 0.88%)</title><rect x="55.2632%" y="213" width="0.8772%" height="15" fill="rgb(222,171,42)" fg:x="126" fg:w="2"/><text x="55.5132%" y="223.50"></text></g><g><title>__split_vma (1 samples, 0.44%)</title><rect x="55.7018%" y="197" width="0.4386%" height="15" fill="rgb(243,84,45)" fg:x="127" fg:w="1"/><text x="55.9518%" y="207.50"></text></g><g><title>__vma_adjust (1 samples, 0.44%)</title><rect x="55.7018%" y="181" width="0.4386%" height="15" fill="rgb(252,49,23)" fg:x="127" fg:w="1"/><text x="55.9518%" y="191.50"></text></g><g><title>mas_store_prealloc (1 samples, 0.44%)</title><rect x="55.7018%" y="165" width="0.4386%" height="15" fill="rgb(215,19,7)" fg:x="127" fg:w="1"/><text x="55.9518%" y="175.50"></text></g><g><title>mas_wr_modify (1 samples, 0.44%)</title><rect x="55.7018%" y="149" width="0.4386%" height="15" fill="rgb(238,81,41)" fg:x="127" fg:w="1"/><text x="55.9518%" y="159.50"></text></g><g><title>mas_wr_node_store (1 samples, 0.44%)</title><rect x="55.7018%" y="133" width="0.4386%" height="15" fill="rgb(210,199,37)" fg:x="127" fg:w="1"/><text x="55.9518%" y="143.50"></text></g><g><title>mas_update_gap (1 samples, 0.44%)</title><rect x="55.7018%" y="117" width="0.4386%" height="15" fill="rgb(244,192,49)" fg:x="127" fg:w="1"/><text x="55.9518%" y="127.50"></text></g><g><title>mas_leaf_max_gap (1 samples, 0.44%)</title><rect x="55.7018%" y="101" width="0.4386%" height="15" fill="rgb(226,211,11)" fg:x="127" fg:w="1"/><text x="55.9518%" y="111.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.44%)</title><rect x="56.1404%" y="341" width="0.4386%" height="15" fill="rgb(236,162,54)" fg:x="128" fg:w="1"/><text x="56.3904%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.44%)</title><rect x="56.1404%" y="325" width="0.4386%" height="15" fill="rgb(220,229,9)" fg:x="128" fg:w="1"/><text x="56.3904%" y="335.50"></text></g><g><title>&lt;core::str::iter::SplitTerminator&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.44%)</title><rect x="56.1404%" y="309" width="0.4386%" height="15" fill="rgb(250,87,22)" fg:x="128" fg:w="1"/><text x="56.3904%" y="319.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (1 samples, 0.44%)</title><rect x="56.1404%" y="293" width="0.4386%" height="15" fill="rgb(239,43,17)" fg:x="128" fg:w="1"/><text x="56.3904%" y="303.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1 samples, 0.44%)</title><rect x="56.1404%" y="277" width="0.4386%" height="15" fill="rgb(231,177,25)" fg:x="128" fg:w="1"/><text x="56.3904%" y="287.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.44%)</title><rect x="56.1404%" y="261" width="0.4386%" height="15" fill="rgb(219,179,1)" fg:x="128" fg:w="1"/><text x="56.3904%" y="271.50"></text></g><g><title>core::slice::memchr::memchr_naive (1 samples, 0.44%)</title><rect x="56.1404%" y="245" width="0.4386%" height="15" fill="rgb(238,219,53)" fg:x="128" fg:w="1"/><text x="56.3904%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (1 samples, 0.44%)</title><rect x="56.5789%" y="341" width="0.4386%" height="15" fill="rgb(232,167,36)" fg:x="129" fg:w="1"/><text x="56.8289%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.44%)</title><rect x="56.5789%" y="325" width="0.4386%" height="15" fill="rgb(244,19,51)" fg:x="129" fg:w="1"/><text x="56.8289%" y="335.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.44%)</title><rect x="56.5789%" y="309" width="0.4386%" height="15" fill="rgb(224,6,22)" fg:x="129" fg:w="1"/><text x="56.8289%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.44%)</title><rect x="56.5789%" y="293" width="0.4386%" height="15" fill="rgb(224,145,5)" fg:x="129" fg:w="1"/><text x="56.8289%" y="303.50"></text></g><g><title>&lt;core::str::iter::SplitTerminator&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.44%)</title><rect x="56.5789%" y="277" width="0.4386%" height="15" fill="rgb(234,130,49)" fg:x="129" fg:w="1"/><text x="56.8289%" y="287.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (1 samples, 0.44%)</title><rect x="56.5789%" y="261" width="0.4386%" height="15" fill="rgb(254,6,2)" fg:x="129" fg:w="1"/><text x="56.8289%" y="271.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1 samples, 0.44%)</title><rect x="56.5789%" y="245" width="0.4386%" height="15" fill="rgb(208,96,46)" fg:x="129" fg:w="1"/><text x="56.8289%" y="255.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.44%)</title><rect x="56.5789%" y="229" width="0.4386%" height="15" fill="rgb(239,3,39)" fg:x="129" fg:w="1"/><text x="56.8289%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.44%)</title><rect x="57.0175%" y="309" width="0.4386%" height="15" fill="rgb(233,210,1)" fg:x="130" fg:w="1"/><text x="57.2675%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;[rust::tree::Node&lt;rust::FileData&gt;]&gt; (1 samples, 0.44%)</title><rect x="57.0175%" y="293" width="0.4386%" height="15" fill="rgb(244,137,37)" fg:x="130" fg:w="1"/><text x="57.2675%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;rust::tree::Node&lt;rust::FileData&gt;&gt; (1 samples, 0.44%)</title><rect x="57.0175%" y="277" width="0.4386%" height="15" fill="rgb(240,136,2)" fg:x="130" fg:w="1"/><text x="57.2675%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.44%)</title><rect x="57.0175%" y="261" width="0.4386%" height="15" fill="rgb(239,18,37)" fg:x="130" fg:w="1"/><text x="57.2675%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.44%)</title><rect x="57.0175%" y="245" width="0.4386%" height="15" fill="rgb(218,185,22)" fg:x="130" fg:w="1"/><text x="57.2675%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.44%)</title><rect x="57.0175%" y="229" width="0.4386%" height="15" fill="rgb(225,218,4)" fg:x="130" fg:w="1"/><text x="57.2675%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.44%)</title><rect x="57.0175%" y="213" width="0.4386%" height="15" fill="rgb(230,182,32)" fg:x="130" fg:w="1"/><text x="57.2675%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.44%)</title><rect x="57.0175%" y="197" width="0.4386%" height="15" fill="rgb(242,56,43)" fg:x="130" fg:w="1"/><text x="57.2675%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.44%)</title><rect x="57.0175%" y="181" width="0.4386%" height="15" fill="rgb(233,99,24)" fg:x="130" fg:w="1"/><text x="57.2675%" y="191.50"></text></g><g><title>cfree (1 samples, 0.44%)</title><rect x="57.0175%" y="165" width="0.4386%" height="15" fill="rgb(234,209,42)" fg:x="130" fg:w="1"/><text x="57.2675%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;rust::tree::FlatTree&lt;rust::FileData&gt;&gt; (2 samples, 0.88%)</title><rect x="57.0175%" y="341" width="0.8772%" height="15" fill="rgb(227,7,12)" fg:x="130" fg:w="2"/><text x="57.2675%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;rust::tree::Node&lt;rust::FileData&gt;&gt;&gt; (2 samples, 0.88%)</title><rect x="57.0175%" y="325" width="0.8772%" height="15" fill="rgb(245,203,43)" fg:x="130" fg:w="2"/><text x="57.2675%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;rust::tree::Node&lt;rust::FileData&gt;&gt;&gt; (1 samples, 0.44%)</title><rect x="57.4561%" y="309" width="0.4386%" height="15" fill="rgb(238,205,33)" fg:x="131" fg:w="1"/><text x="57.7061%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.44%)</title><rect x="57.4561%" y="293" width="0.4386%" height="15" fill="rgb(231,56,7)" fg:x="131" fg:w="1"/><text x="57.7061%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.44%)</title><rect x="57.4561%" y="277" width="0.4386%" height="15" fill="rgb(244,186,29)" fg:x="131" fg:w="1"/><text x="57.7061%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.44%)</title><rect x="57.4561%" y="261" width="0.4386%" height="15" fill="rgb(234,111,31)" fg:x="131" fg:w="1"/><text x="57.7061%" y="271.50"></text></g><g><title>cfree (1 samples, 0.44%)</title><rect x="57.4561%" y="245" width="0.4386%" height="15" fill="rgb(241,149,10)" fg:x="131" fg:w="1"/><text x="57.7061%" y="255.50"></text></g><g><title>[libc.so.6] (1 samples, 0.44%)</title><rect x="57.4561%" y="229" width="0.4386%" height="15" fill="rgb(249,206,44)" fg:x="131" fg:w="1"/><text x="57.7061%" y="239.50"></text></g><g><title>[libc.so.6] (1 samples, 0.44%)</title><rect x="57.4561%" y="213" width="0.4386%" height="15" fill="rgb(251,153,30)" fg:x="131" fg:w="1"/><text x="57.7061%" y="223.50"></text></g><g><title>&lt;regex::re_builder::RegexOptions as core::clone::Clone&gt;::clone (1 samples, 0.44%)</title><rect x="57.8947%" y="181" width="0.4386%" height="15" fill="rgb(239,152,38)" fg:x="132" fg:w="1"/><text x="58.1447%" y="191.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.44%)</title><rect x="57.8947%" y="165" width="0.4386%" height="15" fill="rgb(249,139,47)" fg:x="132" fg:w="1"/><text x="58.1447%" y="175.50"></text></g><g><title>exc_page_fault (1 samples, 0.44%)</title><rect x="57.8947%" y="149" width="0.4386%" height="15" fill="rgb(244,64,35)" fg:x="132" fg:w="1"/><text x="58.1447%" y="159.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.44%)</title><rect x="57.8947%" y="133" width="0.4386%" height="15" fill="rgb(216,46,15)" fg:x="132" fg:w="1"/><text x="58.1447%" y="143.50"></text></g><g><title>handle_mm_fault (1 samples, 0.44%)</title><rect x="57.8947%" y="117" width="0.4386%" height="15" fill="rgb(250,74,19)" fg:x="132" fg:w="1"/><text x="58.1447%" y="127.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.44%)</title><rect x="57.8947%" y="101" width="0.4386%" height="15" fill="rgb(249,42,33)" fg:x="132" fg:w="1"/><text x="58.1447%" y="111.50"></text></g><g><title>do_fault (1 samples, 0.44%)</title><rect x="57.8947%" y="85" width="0.4386%" height="15" fill="rgb(242,149,17)" fg:x="132" fg:w="1"/><text x="58.1447%" y="95.50"></text></g><g><title>filemap_map_pages (1 samples, 0.44%)</title><rect x="57.8947%" y="69" width="0.4386%" height="15" fill="rgb(244,29,21)" fg:x="132" fg:w="1"/><text x="58.1447%" y="79.50"></text></g><g><title>next_uptodate_page (1 samples, 0.44%)</title><rect x="57.8947%" y="53" width="0.4386%" height="15" fill="rgb(220,130,37)" fg:x="132" fg:w="1"/><text x="58.1447%" y="63.50"></text></g><g><title>&lt;&lt;rust::Input as core::str::traits::FromStr&gt;::from_str::RE_CD as core::ops::deref::Deref&gt;::deref (2 samples, 0.88%)</title><rect x="57.8947%" y="325" width="0.8772%" height="15" fill="rgb(211,67,2)" fg:x="132" fg:w="2"/><text x="58.1447%" y="335.50"></text></g><g><title>&lt;&lt;rust::Input as core::str::traits::FromStr&gt;::from_str::RE_CD as core::ops::deref::Deref&gt;::deref::__stability (2 samples, 0.88%)</title><rect x="57.8947%" y="309" width="0.8772%" height="15" fill="rgb(235,68,52)" fg:x="132" fg:w="2"/><text x="58.1447%" y="319.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (2 samples, 0.88%)</title><rect x="57.8947%" y="293" width="0.8772%" height="15" fill="rgb(246,142,3)" fg:x="132" fg:w="2"/><text x="58.1447%" y="303.50"></text></g><g><title>std::sync::once::Once::call_once (2 samples, 0.88%)</title><rect x="57.8947%" y="277" width="0.8772%" height="15" fill="rgb(241,25,7)" fg:x="132" fg:w="2"/><text x="58.1447%" y="287.50"></text></g><g><title>std::sync::once::Once::call_once::{{closure}} (2 samples, 0.88%)</title><rect x="57.8947%" y="261" width="0.8772%" height="15" fill="rgb(242,119,39)" fg:x="132" fg:w="2"/><text x="58.1447%" y="271.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get::{{closure}} (2 samples, 0.88%)</title><rect x="57.8947%" y="245" width="0.8772%" height="15" fill="rgb(241,98,45)" fg:x="132" fg:w="2"/><text x="58.1447%" y="255.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 0.88%)</title><rect x="57.8947%" y="229" width="0.8772%" height="15" fill="rgb(254,28,30)" fg:x="132" fg:w="2"/><text x="58.1447%" y="239.50"></text></g><g><title>&lt;&lt;rust::Input as core::str::traits::FromStr&gt;::from_str::RE_CD as core::ops::deref::Deref&gt;::deref::__static_ref_initialize (2 samples, 0.88%)</title><rect x="57.8947%" y="213" width="0.8772%" height="15" fill="rgb(241,142,54)" fg:x="132" fg:w="2"/><text x="58.1447%" y="223.50"></text></g><g><title>regex::re_builder::unicode::RegexBuilder::build (2 samples, 0.88%)</title><rect x="57.8947%" y="197" width="0.8772%" height="15" fill="rgb(222,85,15)" fg:x="132" fg:w="2"/><text x="58.1447%" y="207.50"></text></g><g><title>regex::exec::ExecBuilder::parse (1 samples, 0.44%)</title><rect x="58.3333%" y="181" width="0.4386%" height="15" fill="rgb(210,85,47)" fg:x="133" fg:w="1"/><text x="58.5833%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.44%)</title><rect x="58.3333%" y="165" width="0.4386%" height="15" fill="rgb(224,206,25)" fg:x="133" fg:w="1"/><text x="58.5833%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.44%)</title><rect x="58.3333%" y="149" width="0.4386%" height="15" fill="rgb(243,201,19)" fg:x="133" fg:w="1"/><text x="58.5833%" y="159.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.44%)</title><rect x="58.3333%" y="133" width="0.4386%" height="15" fill="rgb(236,59,4)" fg:x="133" fg:w="1"/><text x="58.5833%" y="143.50"></text></g><g><title>exc_page_fault (1 samples, 0.44%)</title><rect x="58.3333%" y="117" width="0.4386%" height="15" fill="rgb(254,179,45)" fg:x="133" fg:w="1"/><text x="58.5833%" y="127.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.44%)</title><rect x="58.3333%" y="101" width="0.4386%" height="15" fill="rgb(226,14,10)" fg:x="133" fg:w="1"/><text x="58.5833%" y="111.50"></text></g><g><title>handle_mm_fault (1 samples, 0.44%)</title><rect x="58.3333%" y="85" width="0.4386%" height="15" fill="rgb(244,27,41)" fg:x="133" fg:w="1"/><text x="58.5833%" y="95.50"></text></g><g><title>&lt;regex::input::CharInput as regex::input::Input&gt;::at (1 samples, 0.44%)</title><rect x="59.2105%" y="261" width="0.4386%" height="15" fill="rgb(235,35,32)" fg:x="135" fg:w="1"/><text x="59.4605%" y="271.50"></text></g><g><title>regex::input::Char::len_utf8 (1 samples, 0.44%)</title><rect x="59.2105%" y="245" width="0.4386%" height="15" fill="rgb(218,68,31)" fg:x="135" fg:w="1"/><text x="59.4605%" y="255.50"></text></g><g><title>core::char::from_u32 (1 samples, 0.44%)</title><rect x="59.2105%" y="229" width="0.4386%" height="15" fill="rgb(207,120,37)" fg:x="135" fg:w="1"/><text x="59.4605%" y="239.50"></text></g><g><title>core::char::convert::from_u32 (1 samples, 0.44%)</title><rect x="59.2105%" y="213" width="0.4386%" height="15" fill="rgb(227,98,0)" fg:x="135" fg:w="1"/><text x="59.4605%" y="223.50"></text></g><g><title>core::char::convert::char_try_from_u32 (1 samples, 0.44%)</title><rect x="59.2105%" y="197" width="0.4386%" height="15" fill="rgb(207,7,3)" fg:x="135" fg:w="1"/><text x="59.4605%" y="207.50"></text></g><g><title>&lt;regex::prog::Program as core::ops::deref::Deref&gt;::deref (1 samples, 0.44%)</title><rect x="59.6491%" y="261" width="0.4386%" height="15" fill="rgb(206,98,19)" fg:x="136" fg:w="1"/><text x="59.8991%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.44%)</title><rect x="60.0877%" y="261" width="0.4386%" height="15" fill="rgb(217,5,26)" fg:x="137" fg:w="1"/><text x="60.3377%" y="271.50"></text></g><g><title>core::ptr::write (1 samples, 0.44%)</title><rect x="60.0877%" y="245" width="0.4386%" height="15" fill="rgb(235,190,38)" fg:x="137" fg:w="1"/><text x="60.3377%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.88%)</title><rect x="60.9649%" y="245" width="0.8772%" height="15" fill="rgb(247,86,24)" fg:x="139" fg:w="2"/><text x="61.2149%" y="255.50"></text></g><g><title>regex::exec::ExecNoSync::exec_backtrack (8 samples, 3.51%)</title><rect x="58.7719%" y="309" width="3.5088%" height="15" fill="rgb(205,101,16)" fg:x="134" fg:w="8"/><text x="59.0219%" y="319.50">reg..</text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::exec_ (8 samples, 3.51%)</title><rect x="58.7719%" y="293" width="3.5088%" height="15" fill="rgb(246,168,33)" fg:x="134" fg:w="8"/><text x="59.0219%" y="303.50">reg..</text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::step (8 samples, 3.51%)</title><rect x="58.7719%" y="277" width="3.5088%" height="15" fill="rgb(231,114,1)" fg:x="134" fg:w="8"/><text x="59.0219%" y="287.50">reg..</text></g><g><title>regex::prog::InstRanges::matches (4 samples, 1.75%)</title><rect x="60.5263%" y="261" width="1.7544%" height="15" fill="rgb(207,184,53)" fg:x="138" fg:w="4"/><text x="60.7763%" y="271.50"></text></g><g><title>core::cmp::PartialOrd::le (1 samples, 0.44%)</title><rect x="61.8421%" y="245" width="0.4386%" height="15" fill="rgb(224,95,51)" fg:x="141" fg:w="1"/><text x="62.0921%" y="255.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.44%)</title><rect x="62.7193%" y="261" width="0.4386%" height="15" fill="rgb(212,188,45)" fg:x="143" fg:w="1"/><text x="62.9693%" y="271.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.44%)</title><rect x="62.7193%" y="245" width="0.4386%" height="15" fill="rgb(223,154,38)" fg:x="143" fg:w="1"/><text x="62.9693%" y="255.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.44%)</title><rect x="62.7193%" y="229" width="0.4386%" height="15" fill="rgb(251,22,52)" fg:x="143" fg:w="1"/><text x="62.9693%" y="239.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.44%)</title><rect x="62.7193%" y="213" width="0.4386%" height="15" fill="rgb(229,209,22)" fg:x="143" fg:w="1"/><text x="62.9693%" y="223.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.44%)</title><rect x="62.7193%" y="197" width="0.4386%" height="15" fill="rgb(234,138,34)" fg:x="143" fg:w="1"/><text x="62.9693%" y="207.50"></text></g><g><title>tick_sched_timer (1 samples, 0.44%)</title><rect x="62.7193%" y="181" width="0.4386%" height="15" fill="rgb(212,95,11)" fg:x="143" fg:w="1"/><text x="62.9693%" y="191.50"></text></g><g><title>tick_sched_handle (1 samples, 0.44%)</title><rect x="62.7193%" y="165" width="0.4386%" height="15" fill="rgb(240,179,47)" fg:x="143" fg:w="1"/><text x="62.9693%" y="175.50"></text></g><g><title>update_process_times (1 samples, 0.44%)</title><rect x="62.7193%" y="149" width="0.4386%" height="15" fill="rgb(240,163,11)" fg:x="143" fg:w="1"/><text x="62.9693%" y="159.50"></text></g><g><title>scheduler_tick (1 samples, 0.44%)</title><rect x="62.7193%" y="133" width="0.4386%" height="15" fill="rgb(236,37,12)" fg:x="143" fg:w="1"/><text x="62.9693%" y="143.50"></text></g><g><title>perf_event_task_tick (1 samples, 0.44%)</title><rect x="62.7193%" y="117" width="0.4386%" height="15" fill="rgb(232,164,16)" fg:x="143" fg:w="1"/><text x="62.9693%" y="127.50"></text></g><g><title>perf_adjust_freq_unthr_context (1 samples, 0.44%)</title><rect x="62.7193%" y="101" width="0.4386%" height="15" fill="rgb(244,205,15)" fg:x="143" fg:w="1"/><text x="62.9693%" y="111.50"></text></g><g><title>regex::dfa::Fsm::forward (3 samples, 1.32%)</title><rect x="62.2807%" y="293" width="1.3158%" height="15" fill="rgb(223,117,47)" fg:x="142" fg:w="3"/><text x="62.5307%" y="303.50"></text></g><g><title>regex::dfa::Fsm::exec_at (3 samples, 1.32%)</title><rect x="62.2807%" y="277" width="1.3158%" height="15" fill="rgb(244,107,35)" fg:x="142" fg:w="3"/><text x="62.5307%" y="287.50"></text></g><g><title>regex::literal::imp::LiteralSearcher::find (1 samples, 0.44%)</title><rect x="63.1579%" y="261" width="0.4386%" height="15" fill="rgb(205,140,8)" fg:x="144" fg:w="1"/><text x="63.4079%" y="271.50"></text></g><g><title>regex::literal::imp::Memmem::find (1 samples, 0.44%)</title><rect x="63.1579%" y="245" width="0.4386%" height="15" fill="rgb(228,84,46)" fg:x="144" fg:w="1"/><text x="63.4079%" y="255.50"></text></g><g><title>regex::dfa::Fsm::cached_state_key (1 samples, 0.44%)</title><rect x="64.0351%" y="245" width="0.4386%" height="15" fill="rgb(254,188,9)" fg:x="146" fg:w="1"/><text x="64.2851%" y="255.50"></text></g><g><title>regex::dfa::push_inst_ptr (1 samples, 0.44%)</title><rect x="64.0351%" y="229" width="0.4386%" height="15" fill="rgb(206,112,54)" fg:x="146" fg:w="1"/><text x="64.2851%" y="239.50"></text></g><g><title>regex::dfa::write_vari32 (1 samples, 0.44%)</title><rect x="64.0351%" y="213" width="0.4386%" height="15" fill="rgb(216,84,49)" fg:x="146" fg:w="1"/><text x="64.2851%" y="223.50"></text></g><g><title>regex::dfa::write_varu32 (1 samples, 0.44%)</title><rect x="64.0351%" y="197" width="0.4386%" height="15" fill="rgb(214,194,35)" fg:x="146" fg:w="1"/><text x="64.2851%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.44%)</title><rect x="64.0351%" y="181" width="0.4386%" height="15" fill="rgb(249,28,3)" fg:x="146" fg:w="1"/><text x="64.2851%" y="191.50"></text></g><g><title>regex::dfa::Fsm::exec_byte (2 samples, 0.88%)</title><rect x="64.0351%" y="261" width="0.8772%" height="15" fill="rgb(222,56,52)" fg:x="146" fg:w="2"/><text x="64.2851%" y="271.50"></text></g><g><title>regex::dfa::StateMap::get_ptr (1 samples, 0.44%)</title><rect x="64.4737%" y="245" width="0.4386%" height="15" fill="rgb(245,217,50)" fg:x="147" fg:w="1"/><text x="64.7237%" y="255.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.44%)</title><rect x="64.4737%" y="229" width="0.4386%" height="15" fill="rgb(213,201,24)" fg:x="147" fg:w="1"/><text x="64.7237%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.44%)</title><rect x="64.4737%" y="213" width="0.4386%" height="15" fill="rgb(248,116,28)" fg:x="147" fg:w="1"/><text x="64.7237%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.44%)</title><rect x="64.4737%" y="197" width="0.4386%" height="15" fill="rgb(219,72,43)" fg:x="147" fg:w="1"/><text x="64.7237%" y="207.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.44%)</title><rect x="64.4737%" y="181" width="0.4386%" height="15" fill="rgb(209,138,14)" fg:x="147" fg:w="1"/><text x="64.7237%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.44%)</title><rect x="64.4737%" y="165" width="0.4386%" height="15" fill="rgb(222,18,33)" fg:x="147" fg:w="1"/><text x="64.7237%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.44%)</title><rect x="64.4737%" y="149" width="0.4386%" height="15" fill="rgb(213,199,7)" fg:x="147" fg:w="1"/><text x="64.7237%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.44%)</title><rect x="64.4737%" y="133" width="0.4386%" height="15" fill="rgb(250,110,10)" fg:x="147" fg:w="1"/><text x="64.7237%" y="143.50"></text></g><g><title>regex::exec::ExecNoSync::find_dfa_forward (7 samples, 3.07%)</title><rect x="62.2807%" y="309" width="3.0702%" height="15" fill="rgb(248,123,6)" fg:x="142" fg:w="7"/><text x="62.5307%" y="319.50">reg..</text></g><g><title>regex::dfa::Fsm::reverse (4 samples, 1.75%)</title><rect x="63.5965%" y="293" width="1.7544%" height="15" fill="rgb(206,91,31)" fg:x="145" fg:w="4"/><text x="63.8465%" y="303.50"></text></g><g><title>regex::dfa::Fsm::exec_at_reverse (4 samples, 1.75%)</title><rect x="63.5965%" y="277" width="1.7544%" height="15" fill="rgb(211,154,13)" fg:x="145" fg:w="4"/><text x="63.8465%" y="287.50"></text></g><g><title>regex::dfa::Fsm::next_si (1 samples, 0.44%)</title><rect x="64.9123%" y="261" width="0.4386%" height="15" fill="rgb(225,148,7)" fg:x="148" fg:w="1"/><text x="65.1623%" y="271.50"></text></g><g><title>regex::dfa::Transitions::next_unchecked (1 samples, 0.44%)</title><rect x="64.9123%" y="245" width="0.4386%" height="15" fill="rgb(220,160,43)" fg:x="148" fg:w="1"/><text x="65.1623%" y="255.50"></text></g><g><title>&lt;regex::exec::ExecNoSyncStr as regex::re_trait::RegularExpression&gt;::captures_read_at (16 samples, 7.02%)</title><rect x="58.7719%" y="325" width="7.0175%" height="15" fill="rgb(213,52,39)" fg:x="134" fg:w="16"/><text x="59.0219%" y="335.50">&lt;regex::e..</text></g><g><title>regex::literal::imp::LiteralSearcher::find (1 samples, 0.44%)</title><rect x="65.3509%" y="309" width="0.4386%" height="15" fill="rgb(243,137,7)" fg:x="149" fg:w="1"/><text x="65.6009%" y="319.50"></text></g><g><title>regex::literal::imp::Memmem::find (1 samples, 0.44%)</title><rect x="65.3509%" y="293" width="0.4386%" height="15" fill="rgb(230,79,13)" fg:x="149" fg:w="1"/><text x="65.6009%" y="303.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (2 samples, 0.88%)</title><rect x="65.7895%" y="325" width="0.8772%" height="15" fill="rgb(247,105,23)" fg:x="150" fg:w="2"/><text x="66.0395%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (2 samples, 0.88%)</title><rect x="65.7895%" y="309" width="0.8772%" height="15" fill="rgb(223,179,41)" fg:x="150" fg:w="2"/><text x="66.0395%" y="319.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (2 samples, 0.88%)</title><rect x="65.7895%" y="293" width="0.8772%" height="15" fill="rgb(218,9,34)" fg:x="150" fg:w="2"/><text x="66.0395%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (2 samples, 0.88%)</title><rect x="65.7895%" y="277" width="0.8772%" height="15" fill="rgb(222,106,8)" fg:x="150" fg:w="2"/><text x="66.0395%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.88%)</title><rect x="65.7895%" y="261" width="0.8772%" height="15" fill="rgb(211,220,0)" fg:x="150" fg:w="2"/><text x="66.0395%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.88%)</title><rect x="65.7895%" y="245" width="0.8772%" height="15" fill="rgb(229,52,16)" fg:x="150" fg:w="2"/><text x="66.0395%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.88%)</title><rect x="65.7895%" y="229" width="0.8772%" height="15" fill="rgb(212,155,18)" fg:x="150" fg:w="2"/><text x="66.0395%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.88%)</title><rect x="65.7895%" y="213" width="0.8772%" height="15" fill="rgb(242,21,14)" fg:x="150" fg:w="2"/><text x="66.0395%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.88%)</title><rect x="65.7895%" y="197" width="0.8772%" height="15" fill="rgb(222,19,48)" fg:x="150" fg:w="2"/><text x="66.0395%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.88%)</title><rect x="65.7895%" y="181" width="0.8772%" height="15" fill="rgb(232,45,27)" fg:x="150" fg:w="2"/><text x="66.0395%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.88%)</title><rect x="65.7895%" y="165" width="0.8772%" height="15" fill="rgb(249,103,42)" fg:x="150" fg:w="2"/><text x="66.0395%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.44%)</title><rect x="66.2281%" y="149" width="0.4386%" height="15" fill="rgb(246,81,33)" fg:x="151" fg:w="1"/><text x="66.4781%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.44%)</title><rect x="66.2281%" y="133" width="0.4386%" height="15" fill="rgb(252,33,42)" fg:x="151" fg:w="1"/><text x="66.4781%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.44%)</title><rect x="66.2281%" y="117" width="0.4386%" height="15" fill="rgb(209,212,41)" fg:x="151" fg:w="1"/><text x="66.4781%" y="127.50"></text></g><g><title>malloc (1 samples, 0.44%)</title><rect x="66.2281%" y="101" width="0.4386%" height="15" fill="rgb(207,154,6)" fg:x="151" fg:w="1"/><text x="66.4781%" y="111.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::exec_ (1 samples, 0.44%)</title><rect x="66.6667%" y="309" width="0.4386%" height="15" fill="rgb(223,64,47)" fg:x="152" fg:w="1"/><text x="66.9167%" y="319.50"></text></g><g><title>cfree (2 samples, 0.88%)</title><rect x="66.6667%" y="325" width="0.8772%" height="15" fill="rgb(211,161,38)" fg:x="152" fg:w="2"/><text x="66.9167%" y="335.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::step (1 samples, 0.44%)</title><rect x="67.1053%" y="309" width="0.4386%" height="15" fill="rgb(219,138,40)" fg:x="153" fg:w="1"/><text x="67.3553%" y="319.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::has_visited (1 samples, 0.44%)</title><rect x="67.1053%" y="293" width="0.4386%" height="15" fill="rgb(241,228,46)" fg:x="153" fg:w="1"/><text x="67.3553%" y="303.50"></text></g><g><title>regex::backtrack::usize_to_u32 (1 samples, 0.44%)</title><rect x="67.1053%" y="277" width="0.4386%" height="15" fill="rgb(223,209,38)" fg:x="153" fg:w="1"/><text x="67.3553%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.88%)</title><rect x="67.5439%" y="325" width="0.8772%" height="15" fill="rgb(236,164,45)" fg:x="154" fg:w="2"/><text x="67.7939%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::re_unicode::Regex::captures::{{closure}}&gt; (2 samples, 0.88%)</title><rect x="67.5439%" y="309" width="0.8772%" height="15" fill="rgb(231,15,5)" fg:x="154" fg:w="2"/><text x="67.7939%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::re_unicode::CaptureLocations&gt; (2 samples, 0.88%)</title><rect x="67.5439%" y="293" width="0.8772%" height="15" fill="rgb(252,35,15)" fg:x="154" fg:w="2"/><text x="67.7939%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::re_trait::Locations&gt; (2 samples, 0.88%)</title><rect x="67.5439%" y="277" width="0.8772%" height="15" fill="rgb(248,181,18)" fg:x="154" fg:w="2"/><text x="67.7939%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;usize&gt;&gt;&gt; (2 samples, 0.88%)</title><rect x="67.5439%" y="261" width="0.8772%" height="15" fill="rgb(233,39,42)" fg:x="154" fg:w="2"/><text x="67.7939%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;core::option::Option&lt;usize&gt;&gt;&gt; (2 samples, 0.88%)</title><rect x="67.5439%" y="245" width="0.8772%" height="15" fill="rgb(238,110,33)" fg:x="154" fg:w="2"/><text x="67.7939%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.88%)</title><rect x="67.5439%" y="229" width="0.8772%" height="15" fill="rgb(233,195,10)" fg:x="154" fg:w="2"/><text x="67.7939%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.88%)</title><rect x="67.5439%" y="213" width="0.8772%" height="15" fill="rgb(254,105,3)" fg:x="154" fg:w="2"/><text x="67.7939%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.88%)</title><rect x="67.5439%" y="197" width="0.8772%" height="15" fill="rgb(221,225,9)" fg:x="154" fg:w="2"/><text x="67.7939%" y="207.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::step (2 samples, 0.88%)</title><rect x="67.5439%" y="181" width="0.8772%" height="15" fill="rgb(224,227,45)" fg:x="154" fg:w="2"/><text x="67.7939%" y="191.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::has_visited (2 samples, 0.88%)</title><rect x="67.5439%" y="165" width="0.8772%" height="15" fill="rgb(229,198,43)" fg:x="154" fg:w="2"/><text x="67.7939%" y="175.50"></text></g><g><title>regex::backtrack::usize_to_u32 (2 samples, 0.88%)</title><rect x="67.5439%" y="149" width="0.8772%" height="15" fill="rgb(206,209,35)" fg:x="154" fg:w="2"/><text x="67.7939%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::re_unicode::Captures&gt; (1 samples, 0.44%)</title><rect x="68.4211%" y="325" width="0.4386%" height="15" fill="rgb(245,195,53)" fg:x="156" fg:w="1"/><text x="68.6711%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::re_trait::Locations&gt; (1 samples, 0.44%)</title><rect x="68.4211%" y="309" width="0.4386%" height="15" fill="rgb(240,92,26)" fg:x="156" fg:w="1"/><text x="68.6711%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;usize&gt;&gt;&gt; (1 samples, 0.44%)</title><rect x="68.4211%" y="293" width="0.4386%" height="15" fill="rgb(207,40,23)" fg:x="156" fg:w="1"/><text x="68.6711%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;core::option::Option&lt;usize&gt;&gt;&gt; (1 samples, 0.44%)</title><rect x="68.4211%" y="277" width="0.4386%" height="15" fill="rgb(223,111,35)" fg:x="156" fg:w="1"/><text x="68.6711%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.44%)</title><rect x="68.4211%" y="261" width="0.4386%" height="15" fill="rgb(229,147,28)" fg:x="156" fg:w="1"/><text x="68.6711%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.44%)</title><rect x="68.4211%" y="245" width="0.4386%" height="15" fill="rgb(211,29,28)" fg:x="156" fg:w="1"/><text x="68.6711%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.44%)</title><rect x="68.4211%" y="229" width="0.4386%" height="15" fill="rgb(228,72,33)" fg:x="156" fg:w="1"/><text x="68.6711%" y="239.50"></text></g><g><title>cfree (1 samples, 0.44%)</title><rect x="68.4211%" y="213" width="0.4386%" height="15" fill="rgb(205,214,31)" fg:x="156" fg:w="1"/><text x="68.6711%" y="223.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.44%)</title><rect x="68.4211%" y="197" width="0.4386%" height="15" fill="rgb(224,111,15)" fg:x="156" fg:w="1"/><text x="68.6711%" y="207.50"></text></g><g><title>regex::exec::ExecNoSync::find_dfa_forward (1 samples, 0.44%)</title><rect x="68.8596%" y="325" width="0.4386%" height="15" fill="rgb(253,21,26)" fg:x="157" fg:w="1"/><text x="69.1096%" y="335.50"></text></g><g><title>regex::dfa::Fsm::reverse (1 samples, 0.44%)</title><rect x="68.8596%" y="309" width="0.4386%" height="15" fill="rgb(245,139,43)" fg:x="157" fg:w="1"/><text x="69.1096%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (27 samples, 11.84%)</title><rect x="57.8947%" y="341" width="11.8421%" height="15" fill="rgb(252,170,7)" fg:x="132" fg:w="27"/><text x="58.1447%" y="351.50">core::str::&lt;impl s..</text></g><g><title>regex::re_trait::RegularExpression::locations (1 samples, 0.44%)</title><rect x="69.2982%" y="325" width="0.4386%" height="15" fill="rgb(231,118,14)" fg:x="158" fg:w="1"/><text x="69.5482%" y="335.50"></text></g><g><title>alloc::vec::from_elem (1 samples, 0.44%)</title><rect x="69.2982%" y="309" width="0.4386%" height="15" fill="rgb(238,83,0)" fg:x="158" fg:w="1"/><text x="69.5482%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.44%)</title><rect x="69.2982%" y="293" width="0.4386%" height="15" fill="rgb(221,39,39)" fg:x="158" fg:w="1"/><text x="69.5482%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.44%)</title><rect x="69.2982%" y="277" width="0.4386%" height="15" fill="rgb(222,119,46)" fg:x="158" fg:w="1"/><text x="69.5482%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.44%)</title><rect x="69.2982%" y="261" width="0.4386%" height="15" fill="rgb(222,165,49)" fg:x="158" fg:w="1"/><text x="69.5482%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.44%)</title><rect x="69.2982%" y="245" width="0.4386%" height="15" fill="rgb(219,113,52)" fg:x="158" fg:w="1"/><text x="69.5482%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.44%)</title><rect x="69.2982%" y="229" width="0.4386%" height="15" fill="rgb(214,7,15)" fg:x="158" fg:w="1"/><text x="69.5482%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.44%)</title><rect x="69.2982%" y="213" width="0.4386%" height="15" fill="rgb(235,32,4)" fg:x="158" fg:w="1"/><text x="69.5482%" y="223.50"></text></g><g><title>malloc (1 samples, 0.44%)</title><rect x="69.2982%" y="197" width="0.4386%" height="15" fill="rgb(238,90,54)" fg:x="158" fg:w="1"/><text x="69.5482%" y="207.50"></text></g><g><title>[libc.so.6] (1 samples, 0.44%)</title><rect x="69.2982%" y="181" width="0.4386%" height="15" fill="rgb(213,208,19)" fg:x="158" fg:w="1"/><text x="69.5482%" y="191.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.44%)</title><rect x="69.2982%" y="165" width="0.4386%" height="15" fill="rgb(233,156,4)" fg:x="158" fg:w="1"/><text x="69.5482%" y="175.50"></text></g><g><title>exc_page_fault (1 samples, 0.44%)</title><rect x="69.2982%" y="149" width="0.4386%" height="15" fill="rgb(207,194,5)" fg:x="158" fg:w="1"/><text x="69.5482%" y="159.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.44%)</title><rect x="69.2982%" y="133" width="0.4386%" height="15" fill="rgb(206,111,30)" fg:x="158" fg:w="1"/><text x="69.5482%" y="143.50"></text></g><g><title>handle_mm_fault (1 samples, 0.44%)</title><rect x="69.2982%" y="117" width="0.4386%" height="15" fill="rgb(243,70,54)" fg:x="158" fg:w="1"/><text x="69.5482%" y="127.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.44%)</title><rect x="69.2982%" y="101" width="0.4386%" height="15" fill="rgb(242,28,8)" fg:x="158" fg:w="1"/><text x="69.5482%" y="111.50"></text></g><g><title>rust::tree::FlatTree&lt;T&gt;::new (1 samples, 0.44%)</title><rect x="69.7368%" y="341" width="0.4386%" height="15" fill="rgb(219,106,18)" fg:x="159" fg:w="1"/><text x="69.9868%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.44%)</title><rect x="69.7368%" y="325" width="0.4386%" height="15" fill="rgb(244,222,10)" fg:x="159" fg:w="1"/><text x="69.9868%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.44%)</title><rect x="69.7368%" y="309" width="0.4386%" height="15" fill="rgb(236,179,52)" fg:x="159" fg:w="1"/><text x="69.9868%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.44%)</title><rect x="69.7368%" y="293" width="0.4386%" height="15" fill="rgb(213,23,39)" fg:x="159" fg:w="1"/><text x="69.9868%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.44%)</title><rect x="69.7368%" y="277" width="0.4386%" height="15" fill="rgb(238,48,10)" fg:x="159" fg:w="1"/><text x="69.9868%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.44%)</title><rect x="69.7368%" y="261" width="0.4386%" height="15" fill="rgb(251,196,23)" fg:x="159" fg:w="1"/><text x="69.9868%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.44%)</title><rect x="69.7368%" y="245" width="0.4386%" height="15" fill="rgb(250,152,24)" fg:x="159" fg:w="1"/><text x="69.9868%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.44%)</title><rect x="69.7368%" y="229" width="0.4386%" height="15" fill="rgb(209,150,17)" fg:x="159" fg:w="1"/><text x="69.9868%" y="239.50"></text></g><g><title>malloc (1 samples, 0.44%)</title><rect x="69.7368%" y="213" width="0.4386%" height="15" fill="rgb(234,202,34)" fg:x="159" fg:w="1"/><text x="69.9868%" y="223.50"></text></g><g><title>[libc.so.6] (1 samples, 0.44%)</title><rect x="69.7368%" y="197" width="0.4386%" height="15" fill="rgb(253,148,53)" fg:x="159" fg:w="1"/><text x="69.9868%" y="207.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.44%)</title><rect x="69.7368%" y="181" width="0.4386%" height="15" fill="rgb(218,129,16)" fg:x="159" fg:w="1"/><text x="69.9868%" y="191.50"></text></g><g><title>exc_page_fault (1 samples, 0.44%)</title><rect x="69.7368%" y="165" width="0.4386%" height="15" fill="rgb(216,85,19)" fg:x="159" fg:w="1"/><text x="69.9868%" y="175.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.44%)</title><rect x="69.7368%" y="149" width="0.4386%" height="15" fill="rgb(235,228,7)" fg:x="159" fg:w="1"/><text x="69.9868%" y="159.50"></text></g><g><title>handle_mm_fault (1 samples, 0.44%)</title><rect x="69.7368%" y="133" width="0.4386%" height="15" fill="rgb(245,175,0)" fg:x="159" fg:w="1"/><text x="69.9868%" y="143.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.44%)</title><rect x="69.7368%" y="117" width="0.4386%" height="15" fill="rgb(208,168,36)" fg:x="159" fg:w="1"/><text x="69.9868%" y="127.50"></text></g><g><title>vma_alloc_folio (1 samples, 0.44%)</title><rect x="69.7368%" y="101" width="0.4386%" height="15" fill="rgb(246,171,24)" fg:x="159" fg:w="1"/><text x="69.9868%" y="111.50"></text></g><g><title>__folio_alloc (1 samples, 0.44%)</title><rect x="69.7368%" y="85" width="0.4386%" height="15" fill="rgb(215,142,24)" fg:x="159" fg:w="1"/><text x="69.9868%" y="95.50"></text></g><g><title>__alloc_pages (1 samples, 0.44%)</title><rect x="69.7368%" y="69" width="0.4386%" height="15" fill="rgb(250,187,7)" fg:x="159" fg:w="1"/><text x="69.9868%" y="79.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.44%)</title><rect x="69.7368%" y="53" width="0.4386%" height="15" fill="rgb(228,66,33)" fg:x="159" fg:w="1"/><text x="69.9868%" y="63.50"></text></g><g><title>clear_page_rep (1 samples, 0.44%)</title><rect x="69.7368%" y="37" width="0.4386%" height="15" fill="rgb(234,215,21)" fg:x="159" fg:w="1"/><text x="69.9868%" y="47.50"></text></g><g><title>std::fs::File::open (1 samples, 0.44%)</title><rect x="70.1754%" y="325" width="0.4386%" height="15" fill="rgb(222,191,20)" fg:x="160" fg:w="1"/><text x="70.4254%" y="335.50"></text></g><g><title>std::fs::OpenOptions::open (1 samples, 0.44%)</title><rect x="70.1754%" y="309" width="0.4386%" height="15" fill="rgb(245,79,54)" fg:x="160" fg:w="1"/><text x="70.4254%" y="319.50"></text></g><g><title>std::fs::OpenOptions::_open (1 samples, 0.44%)</title><rect x="70.1754%" y="293" width="0.4386%" height="15" fill="rgb(240,10,37)" fg:x="160" fg:w="1"/><text x="70.4254%" y="303.50"></text></g><g><title>std::sys::unix::fs::File::open (1 samples, 0.44%)</title><rect x="70.1754%" y="277" width="0.4386%" height="15" fill="rgb(214,192,32)" fg:x="160" fg:w="1"/><text x="70.4254%" y="287.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.44%)</title><rect x="70.1754%" y="261" width="0.4386%" height="15" fill="rgb(209,36,54)" fg:x="160" fg:w="1"/><text x="70.4254%" y="271.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.44%)</title><rect x="70.1754%" y="245" width="0.4386%" height="15" fill="rgb(220,10,11)" fg:x="160" fg:w="1"/><text x="70.4254%" y="255.50"></text></g><g><title>std::sys::unix::fs::File::open::{{closure}} (1 samples, 0.44%)</title><rect x="70.1754%" y="229" width="0.4386%" height="15" fill="rgb(221,106,17)" fg:x="160" fg:w="1"/><text x="70.4254%" y="239.50"></text></g><g><title>std::sys::unix::cvt_r (1 samples, 0.44%)</title><rect x="70.1754%" y="213" width="0.4386%" height="15" fill="rgb(251,142,44)" fg:x="160" fg:w="1"/><text x="70.4254%" y="223.50"></text></g><g><title>std::sys::unix::fs::File::open_c::{{closure}} (1 samples, 0.44%)</title><rect x="70.1754%" y="197" width="0.4386%" height="15" fill="rgb(238,13,15)" fg:x="160" fg:w="1"/><text x="70.4254%" y="207.50"></text></g><g><title>open64 (1 samples, 0.44%)</title><rect x="70.1754%" y="181" width="0.4386%" height="15" fill="rgb(208,107,27)" fg:x="160" fg:w="1"/><text x="70.4254%" y="191.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.44%)</title><rect x="70.1754%" y="165" width="0.4386%" height="15" fill="rgb(205,136,37)" fg:x="160" fg:w="1"/><text x="70.4254%" y="175.50"></text></g><g><title>do_syscall_64 (1 samples, 0.44%)</title><rect x="70.1754%" y="149" width="0.4386%" height="15" fill="rgb(250,205,27)" fg:x="160" fg:w="1"/><text x="70.4254%" y="159.50"></text></g><g><title>__x64_sys_openat (1 samples, 0.44%)</title><rect x="70.1754%" y="133" width="0.4386%" height="15" fill="rgb(210,80,43)" fg:x="160" fg:w="1"/><text x="70.4254%" y="143.50"></text></g><g><title>do_sys_openat2 (1 samples, 0.44%)</title><rect x="70.1754%" y="117" width="0.4386%" height="15" fill="rgb(247,160,36)" fg:x="160" fg:w="1"/><text x="70.4254%" y="127.50"></text></g><g><title>do_filp_open (1 samples, 0.44%)</title><rect x="70.1754%" y="101" width="0.4386%" height="15" fill="rgb(234,13,49)" fg:x="160" fg:w="1"/><text x="70.4254%" y="111.50"></text></g><g><title>path_openat (1 samples, 0.44%)</title><rect x="70.1754%" y="85" width="0.4386%" height="15" fill="rgb(234,122,0)" fg:x="160" fg:w="1"/><text x="70.4254%" y="95.50"></text></g><g><title>do_dentry_open (1 samples, 0.44%)</title><rect x="70.1754%" y="69" width="0.4386%" height="15" fill="rgb(207,146,38)" fg:x="160" fg:w="1"/><text x="70.4254%" y="79.50"></text></g><g><title>dquot_file_open (1 samples, 0.44%)</title><rect x="70.1754%" y="53" width="0.4386%" height="15" fill="rgb(207,177,25)" fg:x="160" fg:w="1"/><text x="70.4254%" y="63.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (1 samples, 0.44%)</title><rect x="70.6140%" y="277" width="0.4386%" height="15" fill="rgb(211,178,42)" fg:x="161" fg:w="1"/><text x="70.8640%" y="287.50"></text></g><g><title>std::sys::unix::fs::File::read (1 samples, 0.44%)</title><rect x="70.6140%" y="261" width="0.4386%" height="15" fill="rgb(230,69,54)" fg:x="161" fg:w="1"/><text x="70.8640%" y="271.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (1 samples, 0.44%)</title><rect x="70.6140%" y="245" width="0.4386%" height="15" fill="rgb(214,135,41)" fg:x="161" fg:w="1"/><text x="70.8640%" y="255.50"></text></g><g><title>read (1 samples, 0.44%)</title><rect x="70.6140%" y="229" width="0.4386%" height="15" fill="rgb(237,67,25)" fg:x="161" fg:w="1"/><text x="70.8640%" y="239.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.44%)</title><rect x="70.6140%" y="213" width="0.4386%" height="15" fill="rgb(222,189,50)" fg:x="161" fg:w="1"/><text x="70.8640%" y="223.50"></text></g><g><title>do_syscall_64 (1 samples, 0.44%)</title><rect x="70.6140%" y="197" width="0.4386%" height="15" fill="rgb(245,148,34)" fg:x="161" fg:w="1"/><text x="70.8640%" y="207.50"></text></g><g><title>ksys_read (1 samples, 0.44%)</title><rect x="70.6140%" y="181" width="0.4386%" height="15" fill="rgb(222,29,6)" fg:x="161" fg:w="1"/><text x="70.8640%" y="191.50"></text></g><g><title>vfs_read (1 samples, 0.44%)</title><rect x="70.6140%" y="165" width="0.4386%" height="15" fill="rgb(221,189,43)" fg:x="161" fg:w="1"/><text x="70.8640%" y="175.50"></text></g><g><title>security_file_permission (1 samples, 0.44%)</title><rect x="70.6140%" y="149" width="0.4386%" height="15" fill="rgb(207,36,27)" fg:x="161" fg:w="1"/><text x="70.8640%" y="159.50"></text></g><g><title>apparmor_file_permission (1 samples, 0.44%)</title><rect x="70.6140%" y="133" width="0.4386%" height="15" fill="rgb(217,90,24)" fg:x="161" fg:w="1"/><text x="70.8640%" y="143.50"></text></g><g><title>copy_page_to_iter (1 samples, 0.44%)</title><rect x="71.0526%" y="133" width="0.4386%" height="15" fill="rgb(224,66,35)" fg:x="162" fg:w="1"/><text x="71.3026%" y="143.50"></text></g><g><title>_copy_to_iter (1 samples, 0.44%)</title><rect x="71.0526%" y="117" width="0.4386%" height="15" fill="rgb(221,13,50)" fg:x="162" fg:w="1"/><text x="71.3026%" y="127.50"></text></g><g><title>copy_user_generic_string (1 samples, 0.44%)</title><rect x="71.0526%" y="101" width="0.4386%" height="15" fill="rgb(236,68,49)" fg:x="162" fg:w="1"/><text x="71.3026%" y="111.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.44%)</title><rect x="71.0526%" y="85" width="0.4386%" height="15" fill="rgb(229,146,28)" fg:x="162" fg:w="1"/><text x="71.3026%" y="95.50"></text></g><g><title>exc_page_fault (1 samples, 0.44%)</title><rect x="71.0526%" y="69" width="0.4386%" height="15" fill="rgb(225,31,38)" fg:x="162" fg:w="1"/><text x="71.3026%" y="79.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.44%)</title><rect x="71.0526%" y="53" width="0.4386%" height="15" fill="rgb(250,208,3)" fg:x="162" fg:w="1"/><text x="71.3026%" y="63.50"></text></g><g><title>handle_mm_fault (1 samples, 0.44%)</title><rect x="71.0526%" y="37" width="0.4386%" height="15" fill="rgb(246,54,23)" fg:x="162" fg:w="1"/><text x="71.3026%" y="47.50"></text></g><g><title>std::fs::read_to_string (4 samples, 1.75%)</title><rect x="70.1754%" y="341" width="1.7544%" height="15" fill="rgb(243,76,11)" fg:x="160" fg:w="4"/><text x="70.4254%" y="351.50"></text></g><g><title>std::io::default_read_to_string (3 samples, 1.32%)</title><rect x="70.6140%" y="325" width="1.3158%" height="15" fill="rgb(245,21,50)" fg:x="161" fg:w="3"/><text x="70.8640%" y="335.50"></text></g><g><title>std::io::append_to_string (3 samples, 1.32%)</title><rect x="70.6140%" y="309" width="1.3158%" height="15" fill="rgb(228,9,43)" fg:x="161" fg:w="3"/><text x="70.8640%" y="319.50"></text></g><g><title>std::io::default_read_to_string::{{closure}} (3 samples, 1.32%)</title><rect x="70.6140%" y="293" width="1.3158%" height="15" fill="rgb(208,100,47)" fg:x="161" fg:w="3"/><text x="70.8640%" y="303.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (2 samples, 0.88%)</title><rect x="71.0526%" y="277" width="0.8772%" height="15" fill="rgb(232,26,8)" fg:x="162" fg:w="2"/><text x="71.3026%" y="287.50"></text></g><g><title>std::sys::unix::fs::File::read_buf (2 samples, 0.88%)</title><rect x="71.0526%" y="261" width="0.8772%" height="15" fill="rgb(216,166,38)" fg:x="162" fg:w="2"/><text x="71.3026%" y="271.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read_buf (2 samples, 0.88%)</title><rect x="71.0526%" y="245" width="0.8772%" height="15" fill="rgb(251,202,51)" fg:x="162" fg:w="2"/><text x="71.3026%" y="255.50"></text></g><g><title>read (2 samples, 0.88%)</title><rect x="71.0526%" y="229" width="0.8772%" height="15" fill="rgb(254,216,34)" fg:x="162" fg:w="2"/><text x="71.3026%" y="239.50"></text></g><g><title>entry_SYSCALL_64 (2 samples, 0.88%)</title><rect x="71.0526%" y="213" width="0.8772%" height="15" fill="rgb(251,32,27)" fg:x="162" fg:w="2"/><text x="71.3026%" y="223.50"></text></g><g><title>do_syscall_64 (2 samples, 0.88%)</title><rect x="71.0526%" y="197" width="0.8772%" height="15" fill="rgb(208,127,28)" fg:x="162" fg:w="2"/><text x="71.3026%" y="207.50"></text></g><g><title>ksys_read (2 samples, 0.88%)</title><rect x="71.0526%" y="181" width="0.8772%" height="15" fill="rgb(224,137,22)" fg:x="162" fg:w="2"/><text x="71.3026%" y="191.50"></text></g><g><title>vfs_read (2 samples, 0.88%)</title><rect x="71.0526%" y="165" width="0.8772%" height="15" fill="rgb(254,70,32)" fg:x="162" fg:w="2"/><text x="71.3026%" y="175.50"></text></g><g><title>filemap_read (2 samples, 0.88%)</title><rect x="71.0526%" y="149" width="0.8772%" height="15" fill="rgb(229,75,37)" fg:x="162" fg:w="2"/><text x="71.3026%" y="159.50"></text></g><g><title>touch_atime (1 samples, 0.44%)</title><rect x="71.4912%" y="133" width="0.4386%" height="15" fill="rgb(252,64,23)" fg:x="163" fg:w="1"/><text x="71.7412%" y="143.50"></text></g><g><title>atime_needs_update (1 samples, 0.44%)</title><rect x="71.4912%" y="117" width="0.4386%" height="15" fill="rgb(232,162,48)" fg:x="163" fg:w="1"/><text x="71.7412%" y="127.50"></text></g><g><title>std::panic::catch_unwind (37 samples, 16.23%)</title><rect x="56.1404%" y="421" width="16.2281%" height="15" fill="rgb(246,160,12)" fg:x="128" fg:w="37"/><text x="56.3904%" y="431.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (37 samples, 16.23%)</title><rect x="56.1404%" y="405" width="16.2281%" height="15" fill="rgb(247,166,0)" fg:x="128" fg:w="37"/><text x="56.3904%" y="415.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (37 samples, 16.23%)</title><rect x="56.1404%" y="389" width="16.2281%" height="15" fill="rgb(249,219,21)" fg:x="128" fg:w="37"/><text x="56.3904%" y="399.50">std::panicking::try::do_c..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (37 samples, 16.23%)</title><rect x="56.1404%" y="373" width="16.2281%" height="15" fill="rgb(205,209,3)" fg:x="128" fg:w="37"/><text x="56.3904%" y="383.50">core::ops::function::impl..</text></g><g><title>core::ops::function::FnOnce::call_once (37 samples, 16.23%)</title><rect x="56.1404%" y="357" width="16.2281%" height="15" fill="rgb(243,44,1)" fg:x="128" fg:w="37"/><text x="56.3904%" y="367.50">core::ops::function::FnOn..</text></g><g><title>std::io::stdio::print_to (1 samples, 0.44%)</title><rect x="71.9298%" y="341" width="0.4386%" height="15" fill="rgb(206,159,16)" fg:x="164" fg:w="1"/><text x="72.1798%" y="351.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.44%)</title><rect x="71.9298%" y="325" width="0.4386%" height="15" fill="rgb(244,77,30)" fg:x="164" fg:w="1"/><text x="72.1798%" y="335.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.44%)</title><rect x="71.9298%" y="309" width="0.4386%" height="15" fill="rgb(218,69,12)" fg:x="164" fg:w="1"/><text x="72.1798%" y="319.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 0.44%)</title><rect x="71.9298%" y="293" width="0.4386%" height="15" fill="rgb(212,87,7)" fg:x="164" fg:w="1"/><text x="72.1798%" y="303.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 0.44%)</title><rect x="71.9298%" y="277" width="0.4386%" height="15" fill="rgb(245,114,25)" fg:x="164" fg:w="1"/><text x="72.1798%" y="287.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (1 samples, 0.44%)</title><rect x="71.9298%" y="261" width="0.4386%" height="15" fill="rgb(210,61,42)" fg:x="164" fg:w="1"/><text x="72.1798%" y="271.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (1 samples, 0.44%)</title><rect x="71.9298%" y="245" width="0.4386%" height="15" fill="rgb(211,52,33)" fg:x="164" fg:w="1"/><text x="72.1798%" y="255.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (1 samples, 0.44%)</title><rect x="71.9298%" y="229" width="0.4386%" height="15" fill="rgb(234,58,33)" fg:x="164" fg:w="1"/><text x="72.1798%" y="239.50"></text></g><g><title>write (1 samples, 0.44%)</title><rect x="71.9298%" y="213" width="0.4386%" height="15" fill="rgb(220,115,36)" fg:x="164" fg:w="1"/><text x="72.1798%" y="223.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.44%)</title><rect x="71.9298%" y="197" width="0.4386%" height="15" fill="rgb(243,153,54)" fg:x="164" fg:w="1"/><text x="72.1798%" y="207.50"></text></g><g><title>do_syscall_64 (1 samples, 0.44%)</title><rect x="71.9298%" y="181" width="0.4386%" height="15" fill="rgb(251,47,18)" fg:x="164" fg:w="1"/><text x="72.1798%" y="191.50"></text></g><g><title>ksys_write (1 samples, 0.44%)</title><rect x="71.9298%" y="165" width="0.4386%" height="15" fill="rgb(242,102,42)" fg:x="164" fg:w="1"/><text x="72.1798%" y="175.50"></text></g><g><title>vfs_write (1 samples, 0.44%)</title><rect x="71.9298%" y="149" width="0.4386%" height="15" fill="rgb(234,31,38)" fg:x="164" fg:w="1"/><text x="72.1798%" y="159.50"></text></g><g><title>file_tty_write.constprop.0 (1 samples, 0.44%)</title><rect x="71.9298%" y="133" width="0.4386%" height="15" fill="rgb(221,117,51)" fg:x="164" fg:w="1"/><text x="72.1798%" y="143.50"></text></g><g><title>n_tty_write (1 samples, 0.44%)</title><rect x="71.9298%" y="117" width="0.4386%" height="15" fill="rgb(212,20,18)" fg:x="164" fg:w="1"/><text x="72.1798%" y="127.50"></text></g><g><title>tty_insert_flip_string_and_push_buffer (1 samples, 0.44%)</title><rect x="71.9298%" y="101" width="0.4386%" height="15" fill="rgb(245,133,36)" fg:x="164" fg:w="1"/><text x="72.1798%" y="111.50"></text></g><g><title>queue_work_on (1 samples, 0.44%)</title><rect x="71.9298%" y="85" width="0.4386%" height="15" fill="rgb(212,6,19)" fg:x="164" fg:w="1"/><text x="72.1798%" y="95.50"></text></g><g><title>__mprotect (1 samples, 0.44%)</title><rect x="72.3684%" y="341" width="0.4386%" height="15" fill="rgb(218,1,36)" fg:x="165" fg:w="1"/><text x="72.6184%" y="351.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.44%)</title><rect x="72.3684%" y="325" width="0.4386%" height="15" fill="rgb(246,84,54)" fg:x="165" fg:w="1"/><text x="72.6184%" y="335.50"></text></g><g><title>do_syscall_64 (1 samples, 0.44%)</title><rect x="72.3684%" y="309" width="0.4386%" height="15" fill="rgb(242,110,6)" fg:x="165" fg:w="1"/><text x="72.6184%" y="319.50"></text></g><g><title>__x64_sys_mprotect (1 samples, 0.44%)</title><rect x="72.3684%" y="293" width="0.4386%" height="15" fill="rgb(214,47,5)" fg:x="165" fg:w="1"/><text x="72.6184%" y="303.50"></text></g><g><title>do_mprotect_pkey (1 samples, 0.44%)</title><rect x="72.3684%" y="277" width="0.4386%" height="15" fill="rgb(218,159,25)" fg:x="165" fg:w="1"/><text x="72.6184%" y="287.50"></text></g><g><title>mprotect_fixup (1 samples, 0.44%)</title><rect x="72.3684%" y="261" width="0.4386%" height="15" fill="rgb(215,211,28)" fg:x="165" fg:w="1"/><text x="72.6184%" y="271.50"></text></g><g><title>__split_vma (1 samples, 0.44%)</title><rect x="72.3684%" y="245" width="0.4386%" height="15" fill="rgb(238,59,32)" fg:x="165" fg:w="1"/><text x="72.6184%" y="255.50"></text></g><g><title>__vma_adjust (1 samples, 0.44%)</title><rect x="72.3684%" y="229" width="0.4386%" height="15" fill="rgb(226,82,3)" fg:x="165" fg:w="1"/><text x="72.6184%" y="239.50"></text></g><g><title>mas_store_prealloc (1 samples, 0.44%)</title><rect x="72.3684%" y="213" width="0.4386%" height="15" fill="rgb(240,164,32)" fg:x="165" fg:w="1"/><text x="72.6184%" y="223.50"></text></g><g><title>mas_wr_modify (1 samples, 0.44%)</title><rect x="72.3684%" y="197" width="0.4386%" height="15" fill="rgb(232,46,7)" fg:x="165" fg:w="1"/><text x="72.6184%" y="207.50"></text></g><g><title>std::sys::unix::init (2 samples, 0.88%)</title><rect x="72.3684%" y="405" width="0.8772%" height="15" fill="rgb(229,129,53)" fg:x="165" fg:w="2"/><text x="72.6184%" y="415.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::init (2 samples, 0.88%)</title><rect x="72.3684%" y="389" width="0.8772%" height="15" fill="rgb(234,188,29)" fg:x="165" fg:w="2"/><text x="72.6184%" y="399.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (2 samples, 0.88%)</title><rect x="72.3684%" y="373" width="0.8772%" height="15" fill="rgb(246,141,4)" fg:x="165" fg:w="2"/><text x="72.6184%" y="383.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (2 samples, 0.88%)</title><rect x="72.3684%" y="357" width="0.8772%" height="15" fill="rgb(229,23,39)" fg:x="165" fg:w="2"/><text x="72.6184%" y="367.50"></text></g><g><title>std::sys::unix::os::page_size (1 samples, 0.44%)</title><rect x="72.8070%" y="341" width="0.4386%" height="15" fill="rgb(206,12,3)" fg:x="166" fg:w="1"/><text x="73.0570%" y="351.50"></text></g><g><title>__sysconf (1 samples, 0.44%)</title><rect x="72.8070%" y="325" width="0.4386%" height="15" fill="rgb(252,226,20)" fg:x="166" fg:w="1"/><text x="73.0570%" y="335.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.44%)</title><rect x="72.8070%" y="309" width="0.4386%" height="15" fill="rgb(216,123,35)" fg:x="166" fg:w="1"/><text x="73.0570%" y="319.50"></text></g><g><title>exc_page_fault (1 samples, 0.44%)</title><rect x="72.8070%" y="293" width="0.4386%" height="15" fill="rgb(212,68,40)" fg:x="166" fg:w="1"/><text x="73.0570%" y="303.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.44%)</title><rect x="72.8070%" y="277" width="0.4386%" height="15" fill="rgb(254,125,32)" fg:x="166" fg:w="1"/><text x="73.0570%" y="287.50"></text></g><g><title>handle_mm_fault (1 samples, 0.44%)</title><rect x="72.8070%" y="261" width="0.4386%" height="15" fill="rgb(253,97,22)" fg:x="166" fg:w="1"/><text x="73.0570%" y="271.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.44%)</title><rect x="72.8070%" y="245" width="0.4386%" height="15" fill="rgb(241,101,14)" fg:x="166" fg:w="1"/><text x="73.0570%" y="255.50"></text></g><g><title>do_fault (1 samples, 0.44%)</title><rect x="72.8070%" y="229" width="0.4386%" height="15" fill="rgb(238,103,29)" fg:x="166" fg:w="1"/><text x="73.0570%" y="239.50"></text></g><g><title>filemap_map_pages (1 samples, 0.44%)</title><rect x="72.8070%" y="213" width="0.4386%" height="15" fill="rgb(233,195,47)" fg:x="166" fg:w="1"/><text x="73.0570%" y="223.50"></text></g><g><title>next_uptodate_page (1 samples, 0.44%)</title><rect x="72.8070%" y="197" width="0.4386%" height="15" fill="rgb(246,218,30)" fg:x="166" fg:w="1"/><text x="73.0570%" y="207.50"></text></g><g><title>_IO_file_fopen (1 samples, 0.44%)</title><rect x="73.2456%" y="325" width="0.4386%" height="15" fill="rgb(219,145,47)" fg:x="167" fg:w="1"/><text x="73.4956%" y="335.50"></text></g><g><title>_IO_file_open (1 samples, 0.44%)</title><rect x="73.2456%" y="309" width="0.4386%" height="15" fill="rgb(243,12,26)" fg:x="167" fg:w="1"/><text x="73.4956%" y="319.50"></text></g><g><title>__open64_nocancel (1 samples, 0.44%)</title><rect x="73.2456%" y="293" width="0.4386%" height="15" fill="rgb(214,87,16)" fg:x="167" fg:w="1"/><text x="73.4956%" y="303.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.44%)</title><rect x="73.2456%" y="277" width="0.4386%" height="15" fill="rgb(208,99,42)" fg:x="167" fg:w="1"/><text x="73.4956%" y="287.50"></text></g><g><title>do_syscall_64 (1 samples, 0.44%)</title><rect x="73.2456%" y="261" width="0.4386%" height="15" fill="rgb(253,99,2)" fg:x="167" fg:w="1"/><text x="73.4956%" y="271.50"></text></g><g><title>__x64_sys_openat (1 samples, 0.44%)</title><rect x="73.2456%" y="245" width="0.4386%" height="15" fill="rgb(220,168,23)" fg:x="167" fg:w="1"/><text x="73.4956%" y="255.50"></text></g><g><title>do_sys_openat2 (1 samples, 0.44%)</title><rect x="73.2456%" y="229" width="0.4386%" height="15" fill="rgb(242,38,24)" fg:x="167" fg:w="1"/><text x="73.4956%" y="239.50"></text></g><g><title>do_filp_open (1 samples, 0.44%)</title><rect x="73.2456%" y="213" width="0.4386%" height="15" fill="rgb(225,182,9)" fg:x="167" fg:w="1"/><text x="73.4956%" y="223.50"></text></g><g><title>path_openat (1 samples, 0.44%)</title><rect x="73.2456%" y="197" width="0.4386%" height="15" fill="rgb(243,178,37)" fg:x="167" fg:w="1"/><text x="73.4956%" y="207.50"></text></g><g><title>link_path_walk.part.0.constprop.0 (1 samples, 0.44%)</title><rect x="73.2456%" y="181" width="0.4386%" height="15" fill="rgb(232,139,19)" fg:x="167" fg:w="1"/><text x="73.4956%" y="191.50"></text></g><g><title>inode_permission (1 samples, 0.44%)</title><rect x="73.2456%" y="165" width="0.4386%" height="15" fill="rgb(225,201,24)" fg:x="167" fg:w="1"/><text x="73.4956%" y="175.50"></text></g><g><title>proc_pid_permission (1 samples, 0.44%)</title><rect x="73.2456%" y="149" width="0.4386%" height="15" fill="rgb(221,47,46)" fg:x="167" fg:w="1"/><text x="73.4956%" y="159.50"></text></g><g><title>get_pid_task (1 samples, 0.44%)</title><rect x="73.2456%" y="133" width="0.4386%" height="15" fill="rgb(249,23,13)" fg:x="167" fg:w="1"/><text x="73.4956%" y="143.50"></text></g><g><title>__rcu_read_unlock (1 samples, 0.44%)</title><rect x="73.2456%" y="117" width="0.4386%" height="15" fill="rgb(219,9,5)" fg:x="167" fg:w="1"/><text x="73.4956%" y="127.50"></text></g><g><title>[libc.so.6] (2 samples, 0.88%)</title><rect x="73.2456%" y="341" width="0.8772%" height="15" fill="rgb(254,171,16)" fg:x="167" fg:w="2"/><text x="73.4956%" y="351.50"></text></g><g><title>malloc (1 samples, 0.44%)</title><rect x="73.6842%" y="325" width="0.4386%" height="15" fill="rgb(230,171,20)" fg:x="168" fg:w="1"/><text x="73.9342%" y="335.50"></text></g><g><title>[libc.so.6] (1 samples, 0.44%)</title><rect x="73.6842%" y="309" width="0.4386%" height="15" fill="rgb(210,71,41)" fg:x="168" fg:w="1"/><text x="73.9342%" y="319.50"></text></g><g><title>[libc.so.6] (1 samples, 0.44%)</title><rect x="73.6842%" y="293" width="0.4386%" height="15" fill="rgb(206,173,20)" fg:x="168" fg:w="1"/><text x="73.9342%" y="303.50"></text></g><g><title>[libc.so.6] (1 samples, 0.44%)</title><rect x="73.6842%" y="277" width="0.4386%" height="15" fill="rgb(233,88,34)" fg:x="168" fg:w="1"/><text x="73.9342%" y="287.50"></text></g><g><title>__default_morecore (1 samples, 0.44%)</title><rect x="73.6842%" y="261" width="0.4386%" height="15" fill="rgb(223,209,46)" fg:x="168" fg:w="1"/><text x="73.9342%" y="271.50"></text></g><g><title>__sbrk (1 samples, 0.44%)</title><rect x="73.6842%" y="245" width="0.4386%" height="15" fill="rgb(250,43,18)" fg:x="168" fg:w="1"/><text x="73.9342%" y="255.50"></text></g><g><title>brk (1 samples, 0.44%)</title><rect x="73.6842%" y="229" width="0.4386%" height="15" fill="rgb(208,13,10)" fg:x="168" fg:w="1"/><text x="73.9342%" y="239.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.44%)</title><rect x="73.6842%" y="213" width="0.4386%" height="15" fill="rgb(212,200,36)" fg:x="168" fg:w="1"/><text x="73.9342%" y="223.50"></text></g><g><title>do_syscall_64 (1 samples, 0.44%)</title><rect x="73.6842%" y="197" width="0.4386%" height="15" fill="rgb(225,90,30)" fg:x="168" fg:w="1"/><text x="73.9342%" y="207.50"></text></g><g><title>__do_sys_brk (1 samples, 0.44%)</title><rect x="73.6842%" y="181" width="0.4386%" height="15" fill="rgb(236,182,39)" fg:x="168" fg:w="1"/><text x="73.9342%" y="191.50"></text></g><g><title>do_brk_flags (1 samples, 0.44%)</title><rect x="73.6842%" y="165" width="0.4386%" height="15" fill="rgb(212,144,35)" fg:x="168" fg:w="1"/><text x="73.9342%" y="175.50"></text></g><g><title>perf_event_mmap (1 samples, 0.44%)</title><rect x="73.6842%" y="149" width="0.4386%" height="15" fill="rgb(228,63,44)" fg:x="168" fg:w="1"/><text x="73.9342%" y="159.50"></text></g><g><title>perf_iterate_sb (1 samples, 0.44%)</title><rect x="73.6842%" y="133" width="0.4386%" height="15" fill="rgb(228,109,6)" fg:x="168" fg:w="1"/><text x="73.9342%" y="143.50"></text></g><g><title>perf_iterate_ctx (1 samples, 0.44%)</title><rect x="73.6842%" y="117" width="0.4386%" height="15" fill="rgb(238,117,24)" fg:x="168" fg:w="1"/><text x="73.9342%" y="127.50"></text></g><g><title>perf_event_mmap_output (1 samples, 0.44%)</title><rect x="73.6842%" y="101" width="0.4386%" height="15" fill="rgb(242,26,26)" fg:x="168" fg:w="1"/><text x="73.9342%" y="111.50"></text></g><g><title>__perf_event_header__init_id (1 samples, 0.44%)</title><rect x="73.6842%" y="85" width="0.4386%" height="15" fill="rgb(221,92,48)" fg:x="168" fg:w="1"/><text x="73.9342%" y="95.50"></text></g><g><title>sched_clock_cpu (1 samples, 0.44%)</title><rect x="73.6842%" y="69" width="0.4386%" height="15" fill="rgb(209,209,32)" fg:x="168" fg:w="1"/><text x="73.9342%" y="79.50"></text></g><g><title>native_sched_clock (1 samples, 0.44%)</title><rect x="73.6842%" y="53" width="0.4386%" height="15" fill="rgb(221,70,22)" fg:x="168" fg:w="1"/><text x="73.9342%" y="63.50"></text></g><g><title>[libc.so.6] (46 samples, 20.18%)</title><rect x="54.8246%" y="501" width="20.1754%" height="15" fill="rgb(248,145,5)" fg:x="125" fg:w="46"/><text x="55.0746%" y="511.50">[libc.so.6]</text></g><g><title>std::panic::catch_unwind (45 samples, 19.74%)</title><rect x="55.2632%" y="485" width="19.7368%" height="15" fill="rgb(226,116,26)" fg:x="126" fg:w="45"/><text x="55.5132%" y="495.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (45 samples, 19.74%)</title><rect x="55.2632%" y="469" width="19.7368%" height="15" fill="rgb(244,5,17)" fg:x="126" fg:w="45"/><text x="55.5132%" y="479.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (45 samples, 19.74%)</title><rect x="55.2632%" y="453" width="19.7368%" height="15" fill="rgb(252,159,33)" fg:x="126" fg:w="45"/><text x="55.5132%" y="463.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (43 samples, 18.86%)</title><rect x="56.1404%" y="437" width="18.8596%" height="15" fill="rgb(206,71,0)" fg:x="128" fg:w="43"/><text x="56.3904%" y="447.50">std::rt::lang_start_internal:..</text></g><g><title>std::rt::init (6 samples, 2.63%)</title><rect x="72.3684%" y="421" width="2.6316%" height="15" fill="rgb(233,118,54)" fg:x="165" fg:w="6"/><text x="72.6184%" y="431.50">st..</text></g><g><title>std::sys::unix::thread::guard::init (4 samples, 1.75%)</title><rect x="73.2456%" y="405" width="1.7544%" height="15" fill="rgb(234,83,48)" fg:x="167" fg:w="4"/><text x="73.4956%" y="415.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start_aligned (4 samples, 1.75%)</title><rect x="73.2456%" y="389" width="1.7544%" height="15" fill="rgb(228,3,54)" fg:x="167" fg:w="4"/><text x="73.4956%" y="399.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start (4 samples, 1.75%)</title><rect x="73.2456%" y="373" width="1.7544%" height="15" fill="rgb(226,155,13)" fg:x="167" fg:w="4"/><text x="73.4956%" y="383.50"></text></g><g><title>pthread_getattr_np (4 samples, 1.75%)</title><rect x="73.2456%" y="357" width="1.7544%" height="15" fill="rgb(241,28,37)" fg:x="167" fg:w="4"/><text x="73.4956%" y="367.50"></text></g><g><title>__getdelim (2 samples, 0.88%)</title><rect x="74.1228%" y="341" width="0.8772%" height="15" fill="rgb(233,93,10)" fg:x="169" fg:w="2"/><text x="74.3728%" y="351.50"></text></g><g><title>_IO_file_underflow (2 samples, 0.88%)</title><rect x="74.1228%" y="325" width="0.8772%" height="15" fill="rgb(225,113,19)" fg:x="169" fg:w="2"/><text x="74.3728%" y="335.50"></text></g><g><title>__read_nocancel (2 samples, 0.88%)</title><rect x="74.1228%" y="309" width="0.8772%" height="15" fill="rgb(241,2,18)" fg:x="169" fg:w="2"/><text x="74.3728%" y="319.50"></text></g><g><title>entry_SYSCALL_64 (2 samples, 0.88%)</title><rect x="74.1228%" y="293" width="0.8772%" height="15" fill="rgb(228,207,21)" fg:x="169" fg:w="2"/><text x="74.3728%" y="303.50"></text></g><g><title>do_syscall_64 (2 samples, 0.88%)</title><rect x="74.1228%" y="277" width="0.8772%" height="15" fill="rgb(213,211,35)" fg:x="169" fg:w="2"/><text x="74.3728%" y="287.50"></text></g><g><title>ksys_read (2 samples, 0.88%)</title><rect x="74.1228%" y="261" width="0.8772%" height="15" fill="rgb(209,83,10)" fg:x="169" fg:w="2"/><text x="74.3728%" y="271.50"></text></g><g><title>vfs_read (2 samples, 0.88%)</title><rect x="74.1228%" y="245" width="0.8772%" height="15" fill="rgb(209,164,1)" fg:x="169" fg:w="2"/><text x="74.3728%" y="255.50"></text></g><g><title>seq_read (2 samples, 0.88%)</title><rect x="74.1228%" y="229" width="0.8772%" height="15" fill="rgb(213,184,43)" fg:x="169" fg:w="2"/><text x="74.3728%" y="239.50"></text></g><g><title>seq_read_iter (2 samples, 0.88%)</title><rect x="74.1228%" y="213" width="0.8772%" height="15" fill="rgb(231,61,34)" fg:x="169" fg:w="2"/><text x="74.3728%" y="223.50"></text></g><g><title>show_map (2 samples, 0.88%)</title><rect x="74.1228%" y="197" width="0.8772%" height="15" fill="rgb(235,75,3)" fg:x="169" fg:w="2"/><text x="74.3728%" y="207.50"></text></g><g><title>show_map_vma (2 samples, 0.88%)</title><rect x="74.1228%" y="181" width="0.8772%" height="15" fill="rgb(220,106,47)" fg:x="169" fg:w="2"/><text x="74.3728%" y="191.50"></text></g><g><title>seq_path (2 samples, 0.88%)</title><rect x="74.1228%" y="165" width="0.8772%" height="15" fill="rgb(210,196,33)" fg:x="169" fg:w="2"/><text x="74.3728%" y="175.50"></text></g><g><title>d_path (2 samples, 0.88%)</title><rect x="74.1228%" y="149" width="0.8772%" height="15" fill="rgb(229,154,42)" fg:x="169" fg:w="2"/><text x="74.3728%" y="159.50"></text></g><g><title>prepend_path (1 samples, 0.44%)</title><rect x="74.5614%" y="133" width="0.4386%" height="15" fill="rgb(228,114,26)" fg:x="170" fg:w="1"/><text x="74.8114%" y="143.50"></text></g><g><title>__libc_start_main (47 samples, 20.61%)</title><rect x="54.8246%" y="517" width="20.6140%" height="15" fill="rgb(208,144,1)" fg:x="125" fg:w="47"/><text x="55.0746%" y="527.50">__libc_start_main</text></g><g><title>asm_exc_page_fault (1 samples, 0.44%)</title><rect x="75.0000%" y="501" width="0.4386%" height="15" fill="rgb(239,112,37)" fg:x="171" fg:w="1"/><text x="75.2500%" y="511.50"></text></g><g><title>exc_page_fault (1 samples, 0.44%)</title><rect x="75.0000%" y="485" width="0.4386%" height="15" fill="rgb(210,96,50)" fg:x="171" fg:w="1"/><text x="75.2500%" y="495.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.44%)</title><rect x="75.0000%" y="469" width="0.4386%" height="15" fill="rgb(222,178,2)" fg:x="171" fg:w="1"/><text x="75.2500%" y="479.50"></text></g><g><title>handle_mm_fault (1 samples, 0.44%)</title><rect x="75.0000%" y="453" width="0.4386%" height="15" fill="rgb(226,74,18)" fg:x="171" fg:w="1"/><text x="75.2500%" y="463.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.44%)</title><rect x="75.0000%" y="437" width="0.4386%" height="15" fill="rgb(225,67,54)" fg:x="171" fg:w="1"/><text x="75.2500%" y="447.50"></text></g><g><title>do_fault (1 samples, 0.44%)</title><rect x="75.0000%" y="421" width="0.4386%" height="15" fill="rgb(251,92,32)" fg:x="171" fg:w="1"/><text x="75.2500%" y="431.50"></text></g><g><title>filemap_map_pages (1 samples, 0.44%)</title><rect x="75.0000%" y="405" width="0.4386%" height="15" fill="rgb(228,149,22)" fg:x="171" fg:w="1"/><text x="75.2500%" y="415.50"></text></g><g><title>next_uptodate_page (1 samples, 0.44%)</title><rect x="75.0000%" y="389" width="0.4386%" height="15" fill="rgb(243,54,13)" fg:x="171" fg:w="1"/><text x="75.2500%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.44%)</title><rect x="75.4386%" y="517" width="0.4386%" height="15" fill="rgb(243,180,28)" fg:x="172" fg:w="1"/><text x="75.6886%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.44%)</title><rect x="75.4386%" y="501" width="0.4386%" height="15" fill="rgb(208,167,24)" fg:x="172" fg:w="1"/><text x="75.6886%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.44%)</title><rect x="75.4386%" y="485" width="0.4386%" height="15" fill="rgb(245,73,45)" fg:x="172" fg:w="1"/><text x="75.6886%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.44%)</title><rect x="75.4386%" y="469" width="0.4386%" height="15" fill="rgb(237,203,48)" fg:x="172" fg:w="1"/><text x="75.6886%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.44%)</title><rect x="75.4386%" y="453" width="0.4386%" height="15" fill="rgb(211,197,16)" fg:x="172" fg:w="1"/><text x="75.6886%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.44%)</title><rect x="75.4386%" y="437" width="0.4386%" height="15" fill="rgb(243,99,51)" fg:x="172" fg:w="1"/><text x="75.6886%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.44%)</title><rect x="75.4386%" y="421" width="0.4386%" height="15" fill="rgb(215,123,29)" fg:x="172" fg:w="1"/><text x="75.6886%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.44%)</title><rect x="75.4386%" y="405" width="0.4386%" height="15" fill="rgb(239,186,37)" fg:x="172" fg:w="1"/><text x="75.6886%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.44%)</title><rect x="75.4386%" y="389" width="0.4386%" height="15" fill="rgb(252,136,39)" fg:x="172" fg:w="1"/><text x="75.6886%" y="399.50"></text></g><g><title>do_set_pte (1 samples, 0.44%)</title><rect x="76.7544%" y="405" width="0.4386%" height="15" fill="rgb(223,213,32)" fg:x="175" fg:w="1"/><text x="77.0044%" y="415.50"></text></g><g><title>filemap_map_pages (3 samples, 1.32%)</title><rect x="76.3158%" y="421" width="1.3158%" height="15" fill="rgb(233,115,5)" fg:x="174" fg:w="3"/><text x="76.5658%" y="431.50"></text></g><g><title>next_uptodate_page (1 samples, 0.44%)</title><rect x="77.1930%" y="405" width="0.4386%" height="15" fill="rgb(207,226,44)" fg:x="176" fg:w="1"/><text x="77.4430%" y="415.50"></text></g><g><title>pte_alloc_one (1 samples, 0.44%)</title><rect x="77.6316%" y="421" width="0.4386%" height="15" fill="rgb(208,126,0)" fg:x="177" fg:w="1"/><text x="77.8816%" y="431.50"></text></g><g><title>__alloc_pages (1 samples, 0.44%)</title><rect x="77.6316%" y="405" width="0.4386%" height="15" fill="rgb(244,66,21)" fg:x="177" fg:w="1"/><text x="77.8816%" y="415.50"></text></g><g><title>__memcg_kmem_charge_page (1 samples, 0.44%)</title><rect x="77.6316%" y="389" width="0.4386%" height="15" fill="rgb(222,97,12)" fg:x="177" fg:w="1"/><text x="77.8816%" y="399.50"></text></g><g><title>try_charge_memcg (1 samples, 0.44%)</title><rect x="77.6316%" y="373" width="0.4386%" height="15" fill="rgb(219,213,19)" fg:x="177" fg:w="1"/><text x="77.8816%" y="383.50"></text></g><g><title>__list_del_entry_valid (2 samples, 0.88%)</title><rect x="78.0702%" y="357" width="0.8772%" height="15" fill="rgb(252,169,30)" fg:x="178" fg:w="2"/><text x="78.3202%" y="367.50"></text></g><g><title>do_fault (7 samples, 3.07%)</title><rect x="76.3158%" y="437" width="3.0702%" height="15" fill="rgb(206,32,51)" fg:x="174" fg:w="7"/><text x="76.5658%" y="447.50">do_..</text></g><g><title>vma_alloc_folio (3 samples, 1.32%)</title><rect x="78.0702%" y="421" width="1.3158%" height="15" fill="rgb(250,172,42)" fg:x="178" fg:w="3"/><text x="78.3202%" y="431.50"></text></g><g><title>__folio_alloc (3 samples, 1.32%)</title><rect x="78.0702%" y="405" width="1.3158%" height="15" fill="rgb(209,34,43)" fg:x="178" fg:w="3"/><text x="78.3202%" y="415.50"></text></g><g><title>__alloc_pages (3 samples, 1.32%)</title><rect x="78.0702%" y="389" width="1.3158%" height="15" fill="rgb(223,11,35)" fg:x="178" fg:w="3"/><text x="78.3202%" y="399.50"></text></g><g><title>get_page_from_freelist (3 samples, 1.32%)</title><rect x="78.0702%" y="373" width="1.3158%" height="15" fill="rgb(251,219,26)" fg:x="178" fg:w="3"/><text x="78.3202%" y="383.50"></text></g><g><title>clear_page_rep (1 samples, 0.44%)</title><rect x="78.9474%" y="357" width="0.4386%" height="15" fill="rgb(231,119,3)" fg:x="180" fg:w="1"/><text x="79.1974%" y="367.50"></text></g><g><title>do_wp_page (2 samples, 0.88%)</title><rect x="79.3860%" y="437" width="0.8772%" height="15" fill="rgb(216,97,11)" fg:x="181" fg:w="2"/><text x="79.6360%" y="447.50"></text></g><g><title>vma_alloc_folio (1 samples, 0.44%)</title><rect x="79.8246%" y="421" width="0.4386%" height="15" fill="rgb(223,59,9)" fg:x="182" fg:w="1"/><text x="80.0746%" y="431.50"></text></g><g><title>__folio_alloc (1 samples, 0.44%)</title><rect x="79.8246%" y="405" width="0.4386%" height="15" fill="rgb(233,93,31)" fg:x="182" fg:w="1"/><text x="80.0746%" y="415.50"></text></g><g><title>__alloc_pages (1 samples, 0.44%)</title><rect x="79.8246%" y="389" width="0.4386%" height="15" fill="rgb(239,81,33)" fg:x="182" fg:w="1"/><text x="80.0746%" y="399.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.44%)</title><rect x="79.8246%" y="373" width="0.4386%" height="15" fill="rgb(213,120,34)" fg:x="182" fg:w="1"/><text x="80.0746%" y="383.50"></text></g><g><title>__list_del_entry_valid (1 samples, 0.44%)</title><rect x="79.8246%" y="357" width="0.4386%" height="15" fill="rgb(243,49,53)" fg:x="182" fg:w="1"/><text x="80.0746%" y="367.50"></text></g><g><title>asm_exc_page_fault (11 samples, 4.82%)</title><rect x="75.8772%" y="517" width="4.8246%" height="15" fill="rgb(247,216,33)" fg:x="173" fg:w="11"/><text x="76.1272%" y="527.50">asm_ex..</text></g><g><title>exc_page_fault (11 samples, 4.82%)</title><rect x="75.8772%" y="501" width="4.8246%" height="15" fill="rgb(226,26,14)" fg:x="173" fg:w="11"/><text x="76.1272%" y="511.50">exc_pa..</text></g><g><title>do_user_addr_fault (11 samples, 4.82%)</title><rect x="75.8772%" y="485" width="4.8246%" height="15" fill="rgb(215,49,53)" fg:x="173" fg:w="11"/><text x="76.1272%" y="495.50">do_use..</text></g><g><title>handle_mm_fault (10 samples, 4.39%)</title><rect x="76.3158%" y="469" width="4.3860%" height="15" fill="rgb(245,162,40)" fg:x="174" fg:w="10"/><text x="76.5658%" y="479.50">handl..</text></g><g><title>__handle_mm_fault (10 samples, 4.39%)</title><rect x="76.3158%" y="453" width="4.3860%" height="15" fill="rgb(229,68,17)" fg:x="174" fg:w="10"/><text x="76.5658%" y="463.50">__han..</text></g><g><title>vma_alloc_folio (1 samples, 0.44%)</title><rect x="80.2632%" y="437" width="0.4386%" height="15" fill="rgb(213,182,10)" fg:x="183" fg:w="1"/><text x="80.5132%" y="447.50"></text></g><g><title>__folio_alloc (1 samples, 0.44%)</title><rect x="80.2632%" y="421" width="0.4386%" height="15" fill="rgb(245,125,30)" fg:x="183" fg:w="1"/><text x="80.5132%" y="431.50"></text></g><g><title>__alloc_pages (1 samples, 0.44%)</title><rect x="80.2632%" y="405" width="0.4386%" height="15" fill="rgb(232,202,2)" fg:x="183" fg:w="1"/><text x="80.5132%" y="415.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.44%)</title><rect x="80.2632%" y="389" width="0.4386%" height="15" fill="rgb(237,140,51)" fg:x="183" fg:w="1"/><text x="80.5132%" y="399.50"></text></g><g><title>clear_page_rep (1 samples, 0.44%)</title><rect x="80.2632%" y="373" width="0.4386%" height="15" fill="rgb(236,157,25)" fg:x="183" fg:w="1"/><text x="80.5132%" y="383.50"></text></g><g><title>free_pgtables (1 samples, 0.44%)</title><rect x="80.7018%" y="405" width="0.4386%" height="15" fill="rgb(219,209,0)" fg:x="184" fg:w="1"/><text x="80.9518%" y="415.50"></text></g><g><title>free_pgd_range (1 samples, 0.44%)</title><rect x="80.7018%" y="389" width="0.4386%" height="15" fill="rgb(240,116,54)" fg:x="184" fg:w="1"/><text x="80.9518%" y="399.50"></text></g><g><title>free_pages_and_swap_cache (1 samples, 0.44%)</title><rect x="81.1404%" y="373" width="0.4386%" height="15" fill="rgb(216,10,36)" fg:x="185" fg:w="1"/><text x="81.3904%" y="383.50"></text></g><g><title>tlb_finish_mmu (3 samples, 1.32%)</title><rect x="81.1404%" y="405" width="1.3158%" height="15" fill="rgb(222,72,44)" fg:x="185" fg:w="3"/><text x="81.3904%" y="415.50"></text></g><g><title>tlb_batch_pages_flush (3 samples, 1.32%)</title><rect x="81.1404%" y="389" width="1.3158%" height="15" fill="rgb(232,159,9)" fg:x="185" fg:w="3"/><text x="81.3904%" y="399.50"></text></g><g><title>release_pages (2 samples, 0.88%)</title><rect x="81.5789%" y="373" width="0.8772%" height="15" fill="rgb(210,39,32)" fg:x="186" fg:w="2"/><text x="81.8289%" y="383.50"></text></g><g><title>free_unref_page_list (1 samples, 0.44%)</title><rect x="82.0175%" y="357" width="0.4386%" height="15" fill="rgb(216,194,45)" fg:x="187" fg:w="1"/><text x="82.2675%" y="367.50"></text></g><g><title>__tlb_remove_page_size (1 samples, 0.44%)</title><rect x="83.3333%" y="373" width="0.4386%" height="15" fill="rgb(218,18,35)" fg:x="190" fg:w="1"/><text x="83.5833%" y="383.50"></text></g><g><title>_compound_head (2 samples, 0.88%)</title><rect x="83.7719%" y="373" width="0.8772%" height="15" fill="rgb(207,83,51)" fg:x="191" fg:w="2"/><text x="84.0219%" y="383.50"></text></g><g><title>__mod_lruvec_page_state (1 samples, 0.44%)</title><rect x="84.6491%" y="357" width="0.4386%" height="15" fill="rgb(225,63,43)" fg:x="193" fg:w="1"/><text x="84.8991%" y="367.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.44%)</title><rect x="84.6491%" y="341" width="0.4386%" height="15" fill="rgb(207,57,36)" fg:x="193" fg:w="1"/><text x="84.8991%" y="351.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.44%)</title><rect x="84.6491%" y="325" width="0.4386%" height="15" fill="rgb(216,99,33)" fg:x="193" fg:w="1"/><text x="84.8991%" y="335.50"></text></g><g><title>__rcu_read_unlock (1 samples, 0.44%)</title><rect x="85.0877%" y="357" width="0.4386%" height="15" fill="rgb(225,42,16)" fg:x="194" fg:w="1"/><text x="85.3377%" y="367.50"></text></g><g><title>__mmput (12 samples, 5.26%)</title><rect x="80.7018%" y="437" width="5.2632%" height="15" fill="rgb(220,201,45)" fg:x="184" fg:w="12"/><text x="80.9518%" y="447.50">__mmput</text></g><g><title>exit_mmap (12 samples, 5.26%)</title><rect x="80.7018%" y="421" width="5.2632%" height="15" fill="rgb(225,33,4)" fg:x="184" fg:w="12"/><text x="80.9518%" y="431.50">exit_m..</text></g><g><title>unmap_vmas (8 samples, 3.51%)</title><rect x="82.4561%" y="405" width="3.5088%" height="15" fill="rgb(224,33,50)" fg:x="188" fg:w="8"/><text x="82.7061%" y="415.50">unm..</text></g><g><title>unmap_page_range (8 samples, 3.51%)</title><rect x="82.4561%" y="389" width="3.5088%" height="15" fill="rgb(246,198,51)" fg:x="188" fg:w="8"/><text x="82.7061%" y="399.50">unm..</text></g><g><title>page_remove_rmap (3 samples, 1.32%)</title><rect x="84.6491%" y="373" width="1.3158%" height="15" fill="rgb(205,22,4)" fg:x="193" fg:w="3"/><text x="84.8991%" y="383.50"></text></g><g><title>lock_page_memcg (1 samples, 0.44%)</title><rect x="85.5263%" y="357" width="0.4386%" height="15" fill="rgb(206,3,8)" fg:x="195" fg:w="1"/><text x="85.7763%" y="367.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.44%)</title><rect x="85.5263%" y="341" width="0.4386%" height="15" fill="rgb(251,23,15)" fg:x="195" fg:w="1"/><text x="85.7763%" y="351.50"></text></g><g><title>[vmlinux] (13 samples, 5.70%)</title><rect x="80.7018%" y="485" width="5.7018%" height="15" fill="rgb(252,88,28)" fg:x="184" fg:w="13"/><text x="80.9518%" y="495.50">[vmlinu..</text></g><g><title>do_group_exit (13 samples, 5.70%)</title><rect x="80.7018%" y="469" width="5.7018%" height="15" fill="rgb(212,127,14)" fg:x="184" fg:w="13"/><text x="80.9518%" y="479.50">do_grou..</text></g><g><title>do_exit (13 samples, 5.70%)</title><rect x="80.7018%" y="453" width="5.7018%" height="15" fill="rgb(247,145,37)" fg:x="184" fg:w="13"/><text x="80.9518%" y="463.50">do_exit</text></g><g><title>put_files_struct (1 samples, 0.44%)</title><rect x="85.9649%" y="437" width="0.4386%" height="15" fill="rgb(209,117,53)" fg:x="196" fg:w="1"/><text x="86.2149%" y="447.50"></text></g><g><title>filp_close (1 samples, 0.44%)</title><rect x="85.9649%" y="421" width="0.4386%" height="15" fill="rgb(212,90,42)" fg:x="196" fg:w="1"/><text x="86.2149%" y="431.50"></text></g><g><title>dnotify_flush (1 samples, 0.44%)</title><rect x="85.9649%" y="405" width="0.4386%" height="15" fill="rgb(218,164,37)" fg:x="196" fg:w="1"/><text x="86.2149%" y="415.50"></text></g><g><title>flush_signal_handlers (1 samples, 0.44%)</title><rect x="86.8421%" y="405" width="0.4386%" height="15" fill="rgb(246,65,34)" fg:x="198" fg:w="1"/><text x="87.0921%" y="415.50"></text></g><g><title>__rcu_read_unlock (1 samples, 0.44%)</title><rect x="87.2807%" y="341" width="0.4386%" height="15" fill="rgb(231,100,33)" fg:x="199" fg:w="1"/><text x="87.5307%" y="351.50"></text></g><g><title>perf_event_comm (2 samples, 0.88%)</title><rect x="87.2807%" y="405" width="0.8772%" height="15" fill="rgb(228,126,14)" fg:x="199" fg:w="2"/><text x="87.5307%" y="415.50"></text></g><g><title>perf_iterate_sb (2 samples, 0.88%)</title><rect x="87.2807%" y="389" width="0.8772%" height="15" fill="rgb(215,173,21)" fg:x="199" fg:w="2"/><text x="87.5307%" y="399.50"></text></g><g><title>perf_iterate_ctx (2 samples, 0.88%)</title><rect x="87.2807%" y="373" width="0.8772%" height="15" fill="rgb(210,6,40)" fg:x="199" fg:w="2"/><text x="87.5307%" y="383.50"></text></g><g><title>perf_event_comm_output (2 samples, 0.88%)</title><rect x="87.2807%" y="357" width="0.8772%" height="15" fill="rgb(212,48,18)" fg:x="199" fg:w="2"/><text x="87.5307%" y="367.50"></text></g><g><title>perf_output_begin (1 samples, 0.44%)</title><rect x="87.7193%" y="341" width="0.4386%" height="15" fill="rgb(230,214,11)" fg:x="200" fg:w="1"/><text x="87.9693%" y="351.50"></text></g><g><title>begin_new_exec (4 samples, 1.75%)</title><rect x="86.8421%" y="421" width="1.7544%" height="15" fill="rgb(254,105,39)" fg:x="198" fg:w="4"/><text x="87.0921%" y="431.50"></text></g><g><title>security_bprm_committing_creds (1 samples, 0.44%)</title><rect x="88.1579%" y="405" width="0.4386%" height="15" fill="rgb(245,158,5)" fg:x="201" fg:w="1"/><text x="88.4079%" y="415.50"></text></g><g><title>apparmor_bprm_committing_creds (1 samples, 0.44%)</title><rect x="88.1579%" y="389" width="0.4386%" height="15" fill="rgb(249,208,11)" fg:x="201" fg:w="1"/><text x="88.4079%" y="399.50"></text></g><g><title>change_protection (1 samples, 0.44%)</title><rect x="89.0351%" y="389" width="0.4386%" height="15" fill="rgb(210,39,28)" fg:x="203" fg:w="1"/><text x="89.2851%" y="399.50"></text></g><g><title>perf_event_mmap (1 samples, 0.44%)</title><rect x="89.4737%" y="389" width="0.4386%" height="15" fill="rgb(211,56,53)" fg:x="204" fg:w="1"/><text x="89.7237%" y="399.50"></text></g><g><title>perf_iterate_sb (1 samples, 0.44%)</title><rect x="89.4737%" y="373" width="0.4386%" height="15" fill="rgb(226,201,30)" fg:x="204" fg:w="1"/><text x="89.7237%" y="383.50"></text></g><g><title>perf_iterate_ctx (1 samples, 0.44%)</title><rect x="89.4737%" y="357" width="0.4386%" height="15" fill="rgb(239,101,34)" fg:x="204" fg:w="1"/><text x="89.7237%" y="367.50"></text></g><g><title>perf_event_mmap_output (1 samples, 0.44%)</title><rect x="89.4737%" y="341" width="0.4386%" height="15" fill="rgb(226,209,5)" fg:x="204" fg:w="1"/><text x="89.7237%" y="351.50"></text></g><g><title>perf_output_copy (1 samples, 0.44%)</title><rect x="89.4737%" y="325" width="0.4386%" height="15" fill="rgb(250,105,47)" fg:x="204" fg:w="1"/><text x="89.7237%" y="335.50"></text></g><g><title>__output_copy (1 samples, 0.44%)</title><rect x="89.4737%" y="309" width="0.4386%" height="15" fill="rgb(230,72,3)" fg:x="204" fg:w="1"/><text x="89.7237%" y="319.50"></text></g><g><title>__memcpy (1 samples, 0.44%)</title><rect x="89.4737%" y="293" width="0.4386%" height="15" fill="rgb(232,218,39)" fg:x="204" fg:w="1"/><text x="89.7237%" y="303.50"></text></g><g><title>vm_stat_account (1 samples, 0.44%)</title><rect x="89.9123%" y="389" width="0.4386%" height="15" fill="rgb(248,166,6)" fg:x="205" fg:w="1"/><text x="90.1623%" y="399.50"></text></g><g><title>vma_merge (1 samples, 0.44%)</title><rect x="90.3509%" y="389" width="0.4386%" height="15" fill="rgb(247,89,20)" fg:x="206" fg:w="1"/><text x="90.6009%" y="399.50"></text></g><g><title>__sysvec_irq_work (3 samples, 1.32%)</title><rect x="91.6667%" y="325" width="1.3158%" height="15" fill="rgb(248,130,54)" fg:x="209" fg:w="3"/><text x="91.9167%" y="335.50"></text></g><g><title>irq_work_run (3 samples, 1.32%)</title><rect x="91.6667%" y="309" width="1.3158%" height="15" fill="rgb(234,196,4)" fg:x="209" fg:w="3"/><text x="91.9167%" y="319.50"></text></g><g><title>irq_work_run_list (3 samples, 1.32%)</title><rect x="91.6667%" y="293" width="1.3158%" height="15" fill="rgb(250,143,31)" fg:x="209" fg:w="3"/><text x="91.9167%" y="303.50"></text></g><g><title>irq_work_single (3 samples, 1.32%)</title><rect x="91.6667%" y="277" width="1.3158%" height="15" fill="rgb(211,110,34)" fg:x="209" fg:w="3"/><text x="91.9167%" y="287.50"></text></g><g><title>perf_pending_irq (3 samples, 1.32%)</title><rect x="91.6667%" y="261" width="1.3158%" height="15" fill="rgb(215,124,48)" fg:x="209" fg:w="3"/><text x="91.9167%" y="271.50"></text></g><g><title>perf_event_wakeup (2 samples, 0.88%)</title><rect x="92.1053%" y="245" width="0.8772%" height="15" fill="rgb(216,46,13)" fg:x="210" fg:w="2"/><text x="92.3553%" y="255.50"></text></g><g><title>__wake_up_common_lock (2 samples, 0.88%)</title><rect x="92.1053%" y="229" width="0.8772%" height="15" fill="rgb(205,184,25)" fg:x="210" fg:w="2"/><text x="92.3553%" y="239.50"></text></g><g><title>__wake_up_common (2 samples, 0.88%)</title><rect x="92.1053%" y="213" width="0.8772%" height="15" fill="rgb(228,1,10)" fg:x="210" fg:w="2"/><text x="92.3553%" y="223.50"></text></g><g><title>pollwake (2 samples, 0.88%)</title><rect x="92.1053%" y="197" width="0.8772%" height="15" fill="rgb(213,116,27)" fg:x="210" fg:w="2"/><text x="92.3553%" y="207.50"></text></g><g><title>try_to_wake_up (1 samples, 0.44%)</title><rect x="92.5439%" y="181" width="0.4386%" height="15" fill="rgb(241,95,50)" fg:x="211" fg:w="1"/><text x="92.7939%" y="191.50"></text></g><g><title>select_task_rq_fair (1 samples, 0.44%)</title><rect x="92.5439%" y="165" width="0.4386%" height="15" fill="rgb(238,48,32)" fg:x="211" fg:w="1"/><text x="92.7939%" y="175.50"></text></g><g><title>mprotect_fixup (10 samples, 4.39%)</title><rect x="89.0351%" y="405" width="4.3860%" height="15" fill="rgb(235,113,49)" fg:x="203" fg:w="10"/><text x="89.2851%" y="415.50">mprot..</text></g><g><title>vma_set_page_prot (6 samples, 2.63%)</title><rect x="90.7895%" y="389" width="2.6316%" height="15" fill="rgb(205,127,43)" fg:x="207" fg:w="6"/><text x="91.0395%" y="399.50">vm..</text></g><g><title>vm_get_page_prot (5 samples, 2.19%)</title><rect x="91.2281%" y="373" width="2.1930%" height="15" fill="rgb(250,162,2)" fg:x="208" fg:w="5"/><text x="91.4781%" y="383.50">v..</text></g><g><title>asm_sysvec_irq_work (4 samples, 1.75%)</title><rect x="91.6667%" y="357" width="1.7544%" height="15" fill="rgb(220,13,41)" fg:x="209" fg:w="4"/><text x="91.9167%" y="367.50"></text></g><g><title>sysvec_irq_work (4 samples, 1.75%)</title><rect x="91.6667%" y="341" width="1.7544%" height="15" fill="rgb(249,221,25)" fg:x="209" fg:w="4"/><text x="91.9167%" y="351.50"></text></g><g><title>irqtime_account_irq (1 samples, 0.44%)</title><rect x="92.9825%" y="325" width="0.4386%" height="15" fill="rgb(215,208,19)" fg:x="212" fg:w="1"/><text x="93.2325%" y="335.50"></text></g><g><title>sched_clock_cpu (1 samples, 0.44%)</title><rect x="92.9825%" y="309" width="0.4386%" height="15" fill="rgb(236,175,2)" fg:x="212" fg:w="1"/><text x="93.2325%" y="319.50"></text></g><g><title>native_sched_clock (1 samples, 0.44%)</title><rect x="92.9825%" y="293" width="0.4386%" height="15" fill="rgb(241,52,2)" fg:x="212" fg:w="1"/><text x="93.2325%" y="303.50"></text></g><g><title>mas_destroy (1 samples, 0.44%)</title><rect x="93.4211%" y="357" width="0.4386%" height="15" fill="rgb(248,140,14)" fg:x="213" fg:w="1"/><text x="93.6711%" y="367.50"></text></g><g><title>kmem_cache_free_bulk.part.0 (1 samples, 0.44%)</title><rect x="93.4211%" y="341" width="0.4386%" height="15" fill="rgb(253,22,42)" fg:x="213" fg:w="1"/><text x="93.6711%" y="351.50"></text></g><g><title>mas_store_prealloc (2 samples, 0.88%)</title><rect x="93.4211%" y="373" width="0.8772%" height="15" fill="rgb(234,61,47)" fg:x="213" fg:w="2"/><text x="93.6711%" y="383.50"></text></g><g><title>mas_wr_store_setup (1 samples, 0.44%)</title><rect x="93.8596%" y="357" width="0.4386%" height="15" fill="rgb(208,226,15)" fg:x="214" fg:w="1"/><text x="94.1096%" y="367.50"></text></g><g><title>__vma_adjust (3 samples, 1.32%)</title><rect x="93.4211%" y="389" width="1.3158%" height="15" fill="rgb(217,221,4)" fg:x="213" fg:w="3"/><text x="93.6711%" y="399.50"></text></g><g><title>mt_find (1 samples, 0.44%)</title><rect x="94.2982%" y="373" width="0.4386%" height="15" fill="rgb(212,174,34)" fg:x="215" fg:w="1"/><text x="94.5482%" y="383.50"></text></g><g><title>__pmd_alloc (1 samples, 0.44%)</title><rect x="94.7368%" y="373" width="0.4386%" height="15" fill="rgb(253,83,4)" fg:x="216" fg:w="1"/><text x="94.9868%" y="383.50"></text></g><g><title>mod_lruvec_page_state.constprop.0 (1 samples, 0.44%)</title><rect x="94.7368%" y="357" width="0.4386%" height="15" fill="rgb(250,195,49)" fg:x="216" fg:w="1"/><text x="94.9868%" y="367.50"></text></g><g><title>__mod_lruvec_page_state (1 samples, 0.44%)</title><rect x="94.7368%" y="341" width="0.4386%" height="15" fill="rgb(241,192,25)" fg:x="216" fg:w="1"/><text x="94.9868%" y="351.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.44%)</title><rect x="94.7368%" y="325" width="0.4386%" height="15" fill="rgb(208,124,10)" fg:x="216" fg:w="1"/><text x="94.9868%" y="335.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.44%)</title><rect x="94.7368%" y="309" width="0.4386%" height="15" fill="rgb(222,33,0)" fg:x="216" fg:w="1"/><text x="94.9868%" y="319.50"></text></g><g><title>flush_tlb_mm_range (1 samples, 0.44%)</title><rect x="95.1754%" y="373" width="0.4386%" height="15" fill="rgb(234,209,28)" fg:x="217" fg:w="1"/><text x="95.4254%" y="383.50"></text></g><g><title>flush_tlb_func (1 samples, 0.44%)</title><rect x="95.1754%" y="357" width="0.4386%" height="15" fill="rgb(224,11,23)" fg:x="217" fg:w="1"/><text x="95.4254%" y="367.50"></text></g><g><title>native_flush_tlb_one_user (1 samples, 0.44%)</title><rect x="95.1754%" y="341" width="0.4386%" height="15" fill="rgb(232,99,1)" fg:x="217" fg:w="1"/><text x="95.4254%" y="351.50"></text></g><g><title>move_page_tables (3 samples, 1.32%)</title><rect x="94.7368%" y="389" width="1.3158%" height="15" fill="rgb(237,95,45)" fg:x="216" fg:w="3"/><text x="94.9868%" y="399.50"></text></g><g><title>get_old_pud (1 samples, 0.44%)</title><rect x="95.6140%" y="373" width="0.4386%" height="15" fill="rgb(208,109,11)" fg:x="218" fg:w="1"/><text x="95.8640%" y="383.50"></text></g><g><title>shift_arg_pages (7 samples, 3.07%)</title><rect x="93.4211%" y="405" width="3.0702%" height="15" fill="rgb(216,190,48)" fg:x="213" fg:w="7"/><text x="93.6711%" y="415.50">shi..</text></g><g><title>tlb_finish_mmu (1 samples, 0.44%)</title><rect x="96.0526%" y="389" width="0.4386%" height="15" fill="rgb(251,171,36)" fg:x="219" fg:w="1"/><text x="96.3026%" y="399.50"></text></g><g><title>tlb_batch_pages_flush (1 samples, 0.44%)</title><rect x="96.0526%" y="373" width="0.4386%" height="15" fill="rgb(230,62,22)" fg:x="219" fg:w="1"/><text x="96.3026%" y="383.50"></text></g><g><title>release_pages (1 samples, 0.44%)</title><rect x="96.0526%" y="357" width="0.4386%" height="15" fill="rgb(225,114,35)" fg:x="219" fg:w="1"/><text x="96.3026%" y="367.50"></text></g><g><title>__mem_cgroup_uncharge_list (1 samples, 0.44%)</title><rect x="96.0526%" y="341" width="0.4386%" height="15" fill="rgb(215,118,42)" fg:x="219" fg:w="1"/><text x="96.3026%" y="351.50"></text></g><g><title>uncharge_folio (1 samples, 0.44%)</title><rect x="96.0526%" y="325" width="0.4386%" height="15" fill="rgb(243,119,21)" fg:x="219" fg:w="1"/><text x="96.3026%" y="335.50"></text></g><g><title>setup_arg_pages (19 samples, 8.33%)</title><rect x="88.5965%" y="421" width="8.3333%" height="15" fill="rgb(252,177,53)" fg:x="202" fg:w="19"/><text x="88.8465%" y="431.50">setup_arg_pa..</text></g><g><title>tlb_gather_mmu (1 samples, 0.44%)</title><rect x="96.4912%" y="405" width="0.4386%" height="15" fill="rgb(237,209,29)" fg:x="220" fg:w="1"/><text x="96.7412%" y="415.50"></text></g><g><title>__x64_sys_execve (25 samples, 10.96%)</title><rect x="86.4035%" y="485" width="10.9649%" height="15" fill="rgb(212,65,23)" fg:x="197" fg:w="25"/><text x="86.6535%" y="495.50">__x64_sys_execve</text></g><g><title>do_execveat_common.isra.0 (25 samples, 10.96%)</title><rect x="86.4035%" y="469" width="10.9649%" height="15" fill="rgb(230,222,46)" fg:x="197" fg:w="25"/><text x="86.6535%" y="479.50">do_execveat_comm..</text></g><g><title>bprm_execve (25 samples, 10.96%)</title><rect x="86.4035%" y="453" width="10.9649%" height="15" fill="rgb(215,135,32)" fg:x="197" fg:w="25"/><text x="86.6535%" y="463.50">bprm_execve</text></g><g><title>load_elf_binary (25 samples, 10.96%)</title><rect x="86.4035%" y="437" width="10.9649%" height="15" fill="rgb(246,101,22)" fg:x="197" fg:w="25"/><text x="86.6535%" y="447.50">load_elf_binary</text></g><g><title>setup_new_exec (1 samples, 0.44%)</title><rect x="96.9298%" y="421" width="0.4386%" height="15" fill="rgb(206,107,13)" fg:x="221" fg:w="1"/><text x="97.1798%" y="431.50"></text></g><g><title>arch_pick_mmap_layout (1 samples, 0.44%)</title><rect x="96.9298%" y="405" width="0.4386%" height="15" fill="rgb(250,100,44)" fg:x="221" fg:w="1"/><text x="97.1798%" y="415.50"></text></g><g><title>get_random_u64 (1 samples, 0.44%)</title><rect x="96.9298%" y="389" width="0.4386%" height="15" fill="rgb(231,147,38)" fg:x="221" fg:w="1"/><text x="97.1798%" y="399.50"></text></g><g><title>__x64_sys_mprotect (1 samples, 0.44%)</title><rect x="97.3684%" y="485" width="0.4386%" height="15" fill="rgb(229,8,40)" fg:x="222" fg:w="1"/><text x="97.6184%" y="495.50"></text></g><g><title>do_mprotect_pkey (1 samples, 0.44%)</title><rect x="97.3684%" y="469" width="0.4386%" height="15" fill="rgb(221,135,30)" fg:x="222" fg:w="1"/><text x="97.6184%" y="479.50"></text></g><g><title>mas_prev_entry (1 samples, 0.44%)</title><rect x="97.3684%" y="453" width="0.4386%" height="15" fill="rgb(249,193,18)" fg:x="222" fg:w="1"/><text x="97.6184%" y="463.50"></text></g><g><title>entry_SYSCALL_64 (40 samples, 17.54%)</title><rect x="80.7018%" y="517" width="17.5439%" height="15" fill="rgb(209,133,39)" fg:x="184" fg:w="40"/><text x="80.9518%" y="527.50">entry_SYSCALL_64</text></g><g><title>do_syscall_64 (40 samples, 17.54%)</title><rect x="80.7018%" y="501" width="17.5439%" height="15" fill="rgb(232,100,14)" fg:x="184" fg:w="40"/><text x="80.9518%" y="511.50">do_syscall_64</text></g><g><title>ksys_read (1 samples, 0.44%)</title><rect x="97.8070%" y="485" width="0.4386%" height="15" fill="rgb(224,185,1)" fg:x="223" fg:w="1"/><text x="98.0570%" y="495.50"></text></g><g><title>vfs_read (1 samples, 0.44%)</title><rect x="97.8070%" y="469" width="0.4386%" height="15" fill="rgb(223,139,8)" fg:x="223" fg:w="1"/><text x="98.0570%" y="479.50"></text></g><g><title>seq_read (1 samples, 0.44%)</title><rect x="97.8070%" y="453" width="0.4386%" height="15" fill="rgb(232,213,38)" fg:x="223" fg:w="1"/><text x="98.0570%" y="463.50"></text></g><g><title>seq_read_iter (1 samples, 0.44%)</title><rect x="97.8070%" y="437" width="0.4386%" height="15" fill="rgb(207,94,22)" fg:x="223" fg:w="1"/><text x="98.0570%" y="447.50"></text></g><g><title>show_map (1 samples, 0.44%)</title><rect x="97.8070%" y="421" width="0.4386%" height="15" fill="rgb(219,183,54)" fg:x="223" fg:w="1"/><text x="98.0570%" y="431.50"></text></g><g><title>show_map_vma (1 samples, 0.44%)</title><rect x="97.8070%" y="405" width="0.4386%" height="15" fill="rgb(216,185,54)" fg:x="223" fg:w="1"/><text x="98.0570%" y="415.50"></text></g><g><title>show_vma_header_prefix (1 samples, 0.44%)</title><rect x="97.8070%" y="389" width="0.4386%" height="15" fill="rgb(254,217,39)" fg:x="223" fg:w="1"/><text x="98.0570%" y="399.50"></text></g><g><title>seq_put_hex_ll (1 samples, 0.44%)</title><rect x="97.8070%" y="373" width="0.4386%" height="15" fill="rgb(240,178,23)" fg:x="223" fg:w="1"/><text x="98.0570%" y="383.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::step (1 samples, 0.44%)</title><rect x="98.2456%" y="517" width="0.4386%" height="15" fill="rgb(218,11,47)" fg:x="224" fg:w="1"/><text x="98.4956%" y="527.50"></text></g><g><title>regex::dfa::Fsm::exec_byte (1 samples, 0.44%)</title><rect x="98.6842%" y="517" width="0.4386%" height="15" fill="rgb(218,51,51)" fg:x="225" fg:w="1"/><text x="98.9342%" y="527.50"></text></g><g><title>regex::sparse::SparseSet::insert (1 samples, 0.44%)</title><rect x="98.6842%" y="501" width="0.4386%" height="15" fill="rgb(238,126,27)" fg:x="225" fg:w="1"/><text x="98.9342%" y="511.50"></text></g><g><title>regex::exec::ExecNoSync::find_dfa_forward (1 samples, 0.44%)</title><rect x="99.1228%" y="517" width="0.4386%" height="15" fill="rgb(249,202,22)" fg:x="226" fg:w="1"/><text x="99.3728%" y="527.50"></text></g><g><title>regex::dfa::Fsm::forward (1 samples, 0.44%)</title><rect x="99.1228%" y="501" width="0.4386%" height="15" fill="rgb(254,195,49)" fg:x="226" fg:w="1"/><text x="99.3728%" y="511.50"></text></g><g><title>all (228 samples, 100%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(208,123,14)" fg:x="0" fg:w="228"/><text x="0.2500%" y="559.50"></text></g><g><title>rust (222 samples, 97.37%)</title><rect x="2.6316%" y="533" width="97.3684%" height="15" fill="rgb(224,200,8)" fg:x="6" fg:w="222"/><text x="2.8816%" y="543.50">rust</text></g><g><title>regex::exec::ExecNoSync::is_anchor_end_match (1 samples, 0.44%)</title><rect x="99.5614%" y="517" width="0.4386%" height="15" fill="rgb(217,61,36)" fg:x="227" fg:w="1"/><text x="99.8114%" y="527.50"></text></g></svg></svg>